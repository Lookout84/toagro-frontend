import React from 'react';

interface CoordinatesDisplayProps {
  useMyLocation: boolean;
  userLatitude: number | null;
  userLongitude: number | null;
  productLatitude: number | undefined;
  productLongitude: number | undefined;
  isLoadingLocation: boolean;
  onUseMyLocationToggle: (checked: boolean) => void;
  onRequestGeolocation: () => void;
}

const CoordinatesDisplay: React.FC<CoordinatesDisplayProps> = ({
  useMyLocation,
  userLatitude,
  userLongitude,
  productLatitude,
  productLongitude,
  isLoadingLocation,
  onUseMyLocationToggle,
  onRequestGeolocation,
}) => {
  const hasUserCoords = userLatitude !== undefined && userLongitude !== undefined;
  const hasProductCoords = productLatitude !== undefined && productLongitude !== undefined;
  const coordsDiffer = hasUserCoords && hasProductCoords && 
    (userLatitude !== productLatitude || userLongitude !== productLongitude);

  return (
    <div className="space-y-4">
      {/* –ü–µ—Ä–µ–º–∏–∫–∞—á "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –º–æ—î –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è" */}
      <div className="flex items-center space-x-2">
        <input
          id="useMyLocation"
          type="checkbox"
          checked={useMyLocation}
          onChange={(e) => onUseMyLocationToggle(e.target.checked)}
          className="h-4 w-4 text-green-600 focus:ring-green-500 border-gray-300 rounded"
        />
        <label
          htmlFor="useMyLocation"
          className="block text-sm text-gray-900"
        >
          –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –º–æ—î –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è
        </label>
        {isLoadingLocation && (
          <div className="flex items-center text-blue-600">
            <svg className="animate-spin h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24">
              <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
              <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            <span className="text-xs">–í–∏–∑–Ω–∞—á–µ–Ω–Ω—è...</span>
          </div>
        )}
      </div>
      
      {/* –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ä–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏ */}
      {!useMyLocation && (
        <div className="text-sm text-gray-600 bg-blue-50 p-3 rounded-md">
          üí° –í–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ü–µ —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –Ω–∞ –∫–∞—Ä—Ç—ñ –Ω–∏–∂—á–µ (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ —Ç–æ–≤–∞—Ä—É –º–æ–∂—É—Ç—å –≤—ñ–¥—Ä—ñ–∑–Ω—è—Ç–∏—Å—è –≤—ñ–¥ –≤–∞—à–æ–≥–æ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è)
        </div>
      )}
      
      {useMyLocation && hasUserCoords && (
        <div className="text-sm text-green-600 bg-green-50 p-3 rounded-md">
          ‚úÖ –í–∞—à–µ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –≤–∏–∑–Ω–∞—á–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —è–∫ –ª–æ–∫–∞—Ü—ñ—è —Ç–æ–≤–∞—Ä—É
        </div>
      )}
      
      {useMyLocation && !hasUserCoords && !isLoadingLocation && (
        <div className="text-sm text-orange-600 bg-orange-50 p-3 rounded-md">
          <div className="flex items-center justify-between">
            <span>‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –≤–∞—à–µ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è.</span>
            <button
              type="button"
              onClick={onRequestGeolocation}
              className="ml-2 px-3 py-1 text-xs bg-orange-600 text-white rounded hover:bg-orange-700"
            >
              –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑
            </button>
          </div>
        </div>
      )}
      
      {/* –ü–æ–∫–∞–∑—É—î–º–æ —Ä—ñ–∑–Ω–∏—Ü—é –º—ñ–∂ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ —Ç–æ–≤–∞—Ä—É */}
      {!useMyLocation && coordsDiffer && (
        <div className="text-sm text-blue-600 bg-blue-50 p-3 rounded-md">
          üìç –ú—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –≤—ñ–¥—Ä—ñ–∑–Ω—è—î—Ç—å—Å—è –≤—ñ–¥ –≤–∞—à–æ–≥–æ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è
        </div>
      )}
    </div>
  );
};

export default CoordinatesDisplay;

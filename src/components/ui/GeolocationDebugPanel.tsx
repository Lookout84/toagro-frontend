import React from 'react';
import { useAppDispatch } from '../../store';
import { fetchRegions } from '../../store/locationSlice';
import { countriesAPI } from '../../api/apiClient';

interface GeolocationDebugPanelProps {
  formData: {
    useMyLocation: boolean;
    userLatitude: number | null;
    userLongitude: number | null;
    latitude: number | undefined;
    longitude: number | undefined;
    countryId: string;
    regionId: string;
    locationName: string;
  };
  countries: Array<{
    id: number;
    name: string;
    code: string;
    latitude?: number;
    longitude?: number;
  }>;
  onLocationChange: (name: string, value: string | number) => void;
  processGeocodeAddress: (
    address: Record<string, string>,
    countries: Array<{ id: number; name: string; code: string; latitude?: number; longitude?: number }>
  ) => { country: { id: number; name: string; code: string; latitude?: number; longitude?: number }; locationName: string; regionName: string } | null;
  onForceGeocodeUpdate?: (lat: number, lng: number) => void;
}

const GeolocationDebugPanel: React.FC<GeolocationDebugPanelProps> = ({
  formData,
  countries,
  onLocationChange,
  processGeocodeAddress,
  onForceGeocodeUpdate
}) => {
  const dispatch = useAppDispatch();
  const isDevelopment = process.env.NODE_ENV === 'development';

  if (!isDevelopment) {
    return null;
  }

  const handleGeolocationTest = () => {
    console.log("–¢–µ—Å—Ç –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó –≤—Ä—É—á–Ω—É");
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (pos) => console.log("–¢–µ—Å—Ç —É—Å–ø—ñ—à–Ω–∏–π:", pos.coords),
        (err) => console.error("–¢–µ—Å—Ç –Ω–µ—É—Å–ø—ñ—à–Ω–∏–π:", err),
        { enableHighAccuracy: true, timeout: 10000, maximumAge: 0 }
      );
    }
  };

  const handleShowFormState = () => {
    console.log("–ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω —Ñ–æ—Ä–º–∏:", {
      useMyLocation: formData.useMyLocation,
      userCoords: [formData.userLatitude, formData.userLongitude],
      productCoords: [formData.latitude, formData.longitude],
      country: formData.countryId,
      region: formData.regionId,
      location: formData.locationName
    });
  };

  const handleMapTest = () => {
    // –°–∏–º—É–ª—è—Ü—ñ—è –≤–∏–±–æ—Ä—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–∞ –∫–∞—Ä—Ç—ñ
    const testLat = 49.8397 + (Math.random() - 0.5) * 0.01; // –¢–µ—Ä–Ω–æ–ø—ñ–ª—å +/- –Ω–µ–≤–µ–ª–∏–∫–∞ –≤—ñ–¥—Å—Ç–∞–Ω—å
    const testLng = 25.9332 + (Math.random() - 0.5) * 0.01;
    
    console.log("üó∫Ô∏è –°–∏–º—É–ª—è—Ü—ñ—è –≤–∏–±–æ—Ä—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–∞ –∫–∞—Ä—Ç—ñ:", { lat: testLat, lng: testLng });
    
    // –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é —Ç–∞–∫, —è–∫ —ó—ó –≤–∏–∫–ª–∏–∫–∞—î –∫–∞—Ä—Ç–∞
    onLocationChange("latitude", testLat);
    onLocationChange("longitude", testLng);
    
    console.log("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ —Ç–æ–≤–∞—Ä—É –æ–Ω–æ–≤–ª–µ–Ω—ñ. useMyLocation –ø–æ–≤–∏–Ω–µ–Ω —Å—Ç–∞—Ç–∏ false");
  };

  const handleShowCountries = () => {
    console.log("=== –ö–†–ê–á–ù–ò –í –ë–ê–ó–Ü ===");
    console.log("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫—Ä–∞—ó–Ω:", countries.length);
    countries.forEach((country, index) => {
      console.log(`${index + 1}. ID: ${country.id}, Name: "${country.name}", Code: "${country.code}"`);
    });
    console.log("–®—É–∫–∞—î–º–æ –∫–æ–¥ 'ua' —Å–µ—Ä–µ–¥:", countries.map(c => `"${c.code}"`));
    
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –£–∫—Ä–∞—ó–Ω—É
    const ukraine = countries.find(c => 
      c.code?.toLowerCase() === 'ua' || 
      c.name?.toLowerCase().includes('—É–∫—Ä–∞—ó–Ω') ||
      c.name?.toLowerCase().includes('ukraine')
    );
    console.log("–ó–Ω–∞–π–¥–µ–Ω–∞ –£–∫—Ä–∞—ó–Ω–∞:", ukraine);
  };

  const handleTestRegions = () => {
    if (formData.countryId) {
      console.log(`=== –¢–ï–°–¢ –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –†–ï–ì–Ü–û–ù–Ü–í –¥–ª—è –∫—Ä–∞—ó–Ω–∏ ${formData.countryId} ===`);
      dispatch(fetchRegions(formData.countryId))
        .unwrap()
        .then((regions) => {
          console.log("‚úÖ –†–µ–≥—ñ–æ–Ω–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ:", regions);
        })
        .catch((error) => {
          console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ–≥—ñ–æ–Ω—ñ–≤:", error);
        });
    } else {
      console.warn("–ö—Ä–∞—ó–Ω–∞ –Ω–µ –≤–∏–±—Ä–∞–Ω–∞. –°–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä—ñ—Ç—å –∫—Ä–∞—ó–Ω—É.");
    }
  };

  const handleTestAPI = async () => {
    console.log("=== –¢–ï–°–¢ API ENDPOINTS ===");
    
    // –¢–µ—Å—Ç –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É –∫—Ä–∞—ó–Ω
    try {
      const countriesResponse = await countriesAPI.getAll();
      console.log("‚úÖ –ö—Ä–∞—ó–Ω–∏:", countriesResponse.data);
    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫—Ä–∞—ó–Ω:", error);
    }
    
    // –¢–µ—Å—Ç –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É —Ä–µ–≥—ñ–æ–Ω—ñ–≤ (–±–µ–∑ countryId)
    try {
      const regionsResponse = await fetch('http://localhost:5000/api/regions');
      if (regionsResponse.ok) {
        const regionsData = await regionsResponse.json();
        console.log("‚úÖ –í—Å—ñ —Ä–µ–≥—ñ–æ–Ω–∏:", regionsData);
      } else {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ä–µ–≥—ñ–æ–Ω—ñ–≤:", regionsResponse.status);
      }
    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –≤—Å—ñ—Ö —Ä–µ–≥—ñ–æ–Ω—ñ–≤:", error);
    }
    
    // –¢–µ—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ endpoint'—É –¥–ª—è –∫—Ä–∞—ó–Ω–∏
    if (formData.countryId) {
      try {
        const response = await fetch(`http://localhost:5000/api/regions/by-country/${formData.countryId}`);
        if (response.ok) {
          const data = await response.json();
          console.log(`‚úÖ –†–µ–≥—ñ–æ–Ω–∏ –¥–ª—è –∫—Ä–∞—ó–Ω–∏ ${formData.countryId}:`, data);
        } else {
          console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ 404 –¥–ª—è –∫—Ä–∞—ó–Ω–∏ ${formData.countryId}:`, response.status, response.statusText);
        }
      } catch (error) {
        console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É —Ä–µ–≥—ñ–æ–Ω—ñ–≤ –¥–ª—è –∫—Ä–∞—ó–Ω–∏ ${formData.countryId}:`, error);
      }
    }
  };

  const handleShowRegions = () => {
    const state = (window as unknown as { store?: { getState: () => { locations?: { regions?: { id: number | string; name: string }[] } } } })?.store?.getState();
    const regions = state?.locations?.regions || [];
    console.log("=== –†–ï–ì–Ü–û–ù–ò –í –°–¢–û–†–Ü ===");
    console.log("–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ–≥—ñ–æ–Ω—ñ–≤:", regions.length);
    console.log("–°–ø–∏—Å–æ–∫ —Ä–µ–≥—ñ–æ–Ω—ñ–≤:", regions.map((r: { id: number | string; name: string }) => `${r.id}: ${r.name}`));
  };

  const handleTestAddress = () => {
    if (formData.userLatitude && formData.userLongitude) {
      fetch(
        `https://nominatim.openstreetmap.org/reverse?format=json&lat=${formData.userLatitude}&lon=${formData.userLongitude}&zoom=18&addressdetails=1`
      )
        .then((res) => res.json())
        .then((result) => {
          console.log("=== –¢–ï–°–¢ –û–ë–†–û–ë–ö–ò –ê–î–†–ï–°–ò ===");
          console.log("–°–∏—Ä–∞ –∞–¥—Ä–µ—Å–∞:", result.address);
          const processed = processGeocodeAddress(result.address || {}, countries);
          console.log("–û–±—Ä–æ–±–ª–µ–Ω–∞ –∞–¥—Ä–µ—Å–∞:", processed);
        });
    }
  };

  const handleForceUpdate = () => {
    if (formData.userLatitude && formData.userLongitude && onForceGeocodeUpdate) {
      console.log("=== –§–û–†–°–û–í–ê–ù–ï –û–ù–û–í–õ–ï–ù–ù–Ø –ì–ï–û–õ–û–ö–ê–¶–Ü–á ===");
      console.log("–ü–µ—Ä–µ–∑–∞–ø–∏—Å—É—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó");
      onForceGeocodeUpdate(formData.userLatitude, formData.userLongitude);
    }
  };

  const handleClearForm = () => {
    console.log("=== –û–ß–ò–©–ï–ù–ù–Ø –§–û–†–ú–ò ===");
    onLocationChange("countryId", "");
    onLocationChange("locationName", "");
  };

  const handleFillTestData = () => {
    console.log("=== –ó–ê–ü–û–í–ù–ï–ù–ù–Ø –¢–ï–°–¢–û–í–ò–ú–ò –î–ê–ù–ò–ú–ò ===");
    
    // –ó–Ω–∞–π–¥–µ–º–æ –£–∫—Ä–∞—ó–Ω—É –≤ —Å–ø–∏—Å–∫—É –∫—Ä–∞—ó–Ω
    const ukraine = countries.find(c => 
      c.code?.toLowerCase() === 'ua' || 
      c.name?.toLowerCase().includes('—É–∫—Ä–∞—ó–Ω') ||
      c.name?.toLowerCase().includes('ukraine')
    );
    
    if (ukraine) {
      console.log("–ó–Ω–∞–π–¥–µ–Ω–∞ –£–∫—Ä–∞—ó–Ω–∞:", ukraine);
      onLocationChange("countryId", String(ukraine.id));
    } else {
      console.warn("–£–∫—Ä–∞—ó–Ω—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–µ—Ä—à—É –∫—Ä–∞—ó–Ω—É");
      console.log("–î–æ—Å—Ç—É–ø–Ω—ñ –∫—Ä–∞—ó–Ω–∏:", countries);
      if (countries.length > 0 && countries[0]) {
        onLocationChange("countryId", String(countries[0].id));
      }
    }
    
    onLocationChange("locationName", "–¢–µ—Å—Ç–æ–≤–µ –º—ñ—Å—Ç–æ");
  };

  return (
    <div className="bg-gray-50 p-3 rounded-md">
      <div className="flex flex-wrap items-center gap-2 mb-2">
        <button
          type="button"
          onClick={handleGeolocationTest}
          className="px-3 py-1 text-xs bg-gray-600 text-white rounded hover:bg-gray-700"
        >
          üß™ –¢–µ—Å—Ç –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó
        </button>
        
        <button
          type="button"
          onClick={handleShowFormState}
          className="px-3 py-1 text-xs bg-blue-600 text-white rounded hover:bg-blue-700"
        >
          üìä –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞–Ω
        </button>
        
        <button
          type="button"
          onClick={handleMapTest}
          className="px-3 py-1 text-xs bg-green-600 text-white rounded hover:bg-green-700"
        >
          üó∫Ô∏è –¢–µ—Å—Ç –∫–∞—Ä—Ç–∏
        </button>
        
        <button
          type="button"
          onClick={handleShowCountries}
          className="px-3 py-1 text-xs bg-red-600 text-white rounded hover:bg-red-700"
        >
          üè¥ –ü–æ–∫–∞–∑–∞—Ç–∏ –∫—Ä–∞—ó–Ω–∏
        </button>
        
        <button
          type="button"
          onClick={handleTestRegions}
          className="px-3 py-1 text-xs bg-orange-600 text-white rounded hover:bg-orange-700"
        >
          üó∫Ô∏è –¢–µ—Å—Ç —Ä–µ–≥—ñ–æ–Ω—ñ–≤
        </button>
        
        <button
          type="button"
          onClick={handleTestAPI}
          className="px-3 py-1 text-xs bg-yellow-600 text-white rounded hover:bg-yellow-700"
        >
          üîß –¢–µ—Å—Ç API
        </button>
        
        <button
          type="button"
          onClick={handleShowRegions}
          className="px-3 py-1 text-xs bg-indigo-600 text-white rounded hover:bg-indigo-700"
        >
          üìç –ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–≥—ñ–æ–Ω–∏
        </button>
        
        <button
          type="button"
          onClick={handleTestAddress}
          className="px-3 py-1 text-xs bg-purple-600 text-white rounded hover:bg-purple-700"
        >
          üåç –¢–µ—Å—Ç –∞–¥—Ä–µ—Å–∏
        </button>
        
        {formData.userLatitude && formData.userLongitude && (
          <button
            type="button"
            onClick={handleForceUpdate}
            className="px-3 py-1 text-xs bg-red-700 text-white rounded hover:bg-red-800"
          >
            üîÑ –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç–∏ –¥–∞–Ω—ñ
          </button>
        )}
        
        <button
          type="button"
          onClick={handleClearForm}
          className="px-3 py-1 text-xs bg-gray-500 text-white rounded hover:bg-gray-600"
        >
          üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏
        </button>
        
        <button
          type="button"
          onClick={handleFillTestData}
          className="px-3 py-1 text-xs bg-green-500 text-white rounded hover:bg-green-600"
        >
          üìù –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
        </button>
      </div>
      
      <div className="text-xs text-gray-600">
        <div>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {formData.userLatitude ? `${formData.userLatitude.toFixed(4)}, ${formData.userLongitude?.toFixed(4)}` : '–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ'}</div>
        <div>–¢–æ–≤–∞—Ä: {formData.latitude ? `${formData.latitude.toFixed(4)}, ${formData.longitude?.toFixed(4)}` : '–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ'}</div>
        <div>–†–µ–∂–∏–º: {formData.useMyLocation ? 'üîó –Ø–∫ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞' : 'üéØ –û–∫—Ä–µ–º–æ –¥–ª—è —Ç–æ–≤–∞—Ä—É'}</div>
        <div>–ö—Ä–∞—ó–Ω–∞: {formData.countryId || '–Ω–µ –≤–∏–±—Ä–∞–Ω–æ'} | –†–µ–≥—ñ–æ–Ω: {formData.regionId || '–Ω–µ –≤–∏–±—Ä–∞–Ω–æ'}</div>
        <div>–ú—ñ—Å—Ç–æ: {formData.locationName || '–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ'}</div>
      </div>
    </div>
  );
};

export default GeolocationDebugPanel;

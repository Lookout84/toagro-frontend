import React, { useEffect } from 'react';
import { MapPin, RefreshCw, Settings } from 'lucide-react';
import { useLocationManager, LocationCoordinates } from '../../hooks/useLocationManagerV2';

interface Countries {
  id: number;
  name: string;
  code: string;
  latitude?: number;
  longitude?: number;
}

interface LocationManagerProps {
  countries: Countries[];
  value: {
    countryId: string;
    regionId: string;
    communityId: string;
    locationName: string;
    latitude?: number;
    longitude?: number;
    useMyLocation?: boolean;
  };
  onChange: (field: string, value: string | number) => void;
  onCoordinatesChange?: (coords: LocationCoordinates) => void;
  autoRequestLocation?: boolean;
  showDebugInfo?: boolean;
}

const LocationManager: React.FC<LocationManagerProps> = ({
  countries,
  value,
  onChange,
  onCoordinatesChange,
  autoRequestLocation = true,
  showDebugInfo = false,
}) => {
  const locationManager = useLocationManager(countries, {
    current: {
      countryId: value.countryId,
      locationName: value.locationName,
      ...(value.latitude && value.longitude && {
        coordinates: {
          latitude: value.latitude,
          longitude: value.longitude,
        }
      }),
    },
    useUserLocationByDefault: value.useMyLocation ?? true,
  });

  const { state, actions, coordinates, isLocationReady, hasManualInput } = locationManager;

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –∑–∞–ø–∏—Ç –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
  useEffect(() => {
    if (autoRequestLocation && countries.length > 0 && !coordinates) {
      actions.requestBrowserLocation();
    }
  }, [autoRequestLocation, countries.length, coordinates, actions]);

  // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–º—ñ–Ω –∑ –∑–æ–≤–Ω—ñ—à–Ω—å–æ—é —Ñ–æ—Ä–º–æ—é
  useEffect(() => {
    if (state.current.countryId && state.current.countryId !== value.countryId) {
      onChange('countryId', state.current.countryId);
    }
  }, [state, value, onChange]);

  useEffect(() => {
    if (state.current.locationName && state.current.locationName !== value.locationName) {
      onChange('locationName', state.current.locationName);
    }
  }, [state, value, onChange]);

  useEffect(() => {
    if (coordinates && onCoordinatesChange) {
      onCoordinatesChange(coordinates);
    }
  }, [coordinates, onCoordinatesChange]);

  // –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
  const handleManualLocationChange = (newLocationName: string) => {
    actions.setManualField('locationName', newLocationName);
    onChange('locationName', newLocationName);
  };

  const handleManualCountryChange = (countryId: string) => {
    actions.setManualField('countryId', countryId);
    onChange('countryId', countryId);
  };

  const handleUseMyLocationToggle = () => {
    const newValue = !state.useUserLocationByDefault;
    actions.setUseUserLocationByDefault(newValue);
    onChange('useMyLocation', newValue ? 'true' : 'false');
    
    if (newValue && !state.isLoadingBrowserLocation) {
      actions.requestBrowserLocation();
    }
  };

  // –ú–æ–∂–ª–∏–≤–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—î–º–æ –ø—ñ–∑–Ω—ñ—à–µ –¥–ª—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ
  // const handleMapClick = (coords: LocationCoordinates) => {
  //   actions.setCoordinatesFromMap(coords);
  //   if (onCoordinatesChange) {
  //     onCoordinatesChange(coords);
  //   }
  // };

  const handleForceGeocode = () => {
    if (coordinates) {
      actions.forceGeocode(coordinates);
    }
  };

  return (
    <div className="space-y-4">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü—ñ—ó */}
      <div className="flex items-center justify-between">
        <h3 className="text-lg font-medium text-gray-900 flex items-center">
          <MapPin className="w-5 h-5 mr-2 text-green-600" />
          –ú—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É
        </h3>
        
        {showDebugInfo && (
          <button
            type="button"
            onClick={() => actions.setPreserveManualInput(!state.preserveManualInput)}
            className={`p-2 rounded-md text-sm flex items-center ${
              state.preserveManualInput 
                ? 'bg-green-100 text-green-700' 
                : 'bg-gray-100 text-gray-700'
            }`}
            title={`–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥—É: ${state.preserveManualInput ? '–£–≤—ñ–º–∫–Ω–µ–Ω–æ' : '–í–∏–º–∫–Ω–µ–Ω–æ'}`}
          >
            <Settings className="w-4 h-4 mr-1" />
            {state.preserveManualInput ? '–ó–∞—Ö–∏—Å—Ç ON' : '–ó–∞—Ö–∏—Å—Ç OFF'}
          </button>
        )}
      </div>

      {/* –ö–æ–Ω—Ç—Ä–æ–ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó */}
      <div className="bg-gray-50 p-4 rounded-lg">
        <div className="flex items-center justify-between mb-3">
          <label className="flex items-center">
            <input
              type="checkbox"
              checked={state.useUserLocationByDefault}
              onChange={handleUseMyLocationToggle}
              className="rounded border-gray-300 text-green-600 focus:ring-green-500"
            />
            <span className="ml-2 text-sm text-gray-700">
              –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –º–æ—î –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è
            </span>
          </label>
          
          <button
            type="button"
            onClick={() => actions.requestBrowserLocation()}
            disabled={state.isLoadingBrowserLocation}
            className="px-3 py-1 text-sm bg-green-600 text-white rounded-md hover:bg-green-700 disabled:opacity-50 flex items-center"
          >
            <RefreshCw className={`w-4 h-4 mr-1 ${state.isLoadingBrowserLocation ? 'animate-spin' : ''}`} />
            {state.isLoadingBrowserLocation ? '–û—Ç—Ä–∏–º–∞–Ω–Ω—è...' : '–û–Ω–æ–≤–∏—Ç–∏'}
          </button>
        </div>

        {/* –°—Ç–∞—Ç—É—Å –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó */}
        <div className="text-sm text-gray-600">
          {state.isLoadingBrowserLocation && (
            <div className="flex items-center text-blue-600">
              <RefreshCw className="w-4 h-4 mr-2 animate-spin" />
              –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∞—à–æ–≥–æ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è...
            </div>
          )}
          
          {isLocationReady && (
            <div className="flex items-center text-green-600">
              <MapPin className="w-4 h-4 mr-2" />
              –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: {coordinates?.latitude.toFixed(6)}, {coordinates?.longitude.toFixed(6)}
            </div>
          )}
          
          {state.isGeocodingInProgress && (
            <div className="flex items-center text-orange-600">
              <RefreshCw className="w-4 h-4 mr-2 animate-spin" />
              –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∞–¥—Ä–µ—Å–∏...
            </div>
          )}
        </div>
      </div>

      {/* –ü–æ–ª—è –≤–≤–æ–¥—É */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {/* –ö—Ä–∞—ó–Ω–∞ */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            –ö—Ä–∞—ó–Ω–∞ *
          </label>
          <div className="relative">
            <select
              value={value.countryId}
              onChange={(e) => handleManualCountryChange(e.target.value)}
              className="appearance-none w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-green-500 focus:border-green-500"
            >
              <option value="">–í–∏–±–µ—Ä—ñ—Ç—å –∫—Ä–∞—ó–Ω—É</option>
              {countries.map((country) => (
                <option key={country.id} value={country.id}>
                  {country.name}
                </option>
              ))}
            </select>
            {state.sources.country?.type === 'geocoding' && (
              <div className="absolute right-8 top-2 text-xs text-green-600" title="–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∑–Ω–∞—á–µ–Ω–æ">
                üåç
              </div>
            )}
          </div>
        </div>

        {/* –ù–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            –ù–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç *
          </label>
          <div className="relative">
            <input
              type="text"
              value={value.locationName}
              onChange={(e) => handleManualLocationChange(e.target.value)}
              placeholder="–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É"
              className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-green-500 focus:border-green-500"
            />
            {state.sources.locationName?.type === 'geocoding' && (
              <div className="absolute right-2 top-2 text-xs text-green-600" title="–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∑–Ω–∞—á–µ–Ω–æ">
                üåç
              </div>
            )}
          </div>
        </div>
      </div>

      {/* –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–ø–æ–≤–Ω–µ–Ω–∏—Ö –ø–æ–ª—ñ–≤ */}
      {(state.sources.country?.type === 'geocoding' || state.sources.locationName?.type === 'geocoding') && (
        <div className="text-sm text-blue-600 bg-blue-50 p-3 rounded-md">
          <div className="flex items-center">
            <svg className="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
            </svg>
            <span className="font-medium">–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–ø–æ–≤–Ω–µ–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó:</span>
          </div>
          <ul className="mt-1 ml-6 text-xs">
            {state.sources.country?.type === 'geocoding' && <li>‚Ä¢ –ö—Ä–∞—ó–Ω–∞</li>}
            {state.sources.locationName?.type === 'geocoding' && <li>‚Ä¢ –ù–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç</li>}
          </ul>
          <p className="mt-2 text-xs text-gray-600">
            –í–∏ –º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —Ü—ñ –¥–∞–Ω—ñ –≤—Ä—É—á–Ω—É, —è–∫—â–æ –≤–æ–Ω–∏ –Ω–µ—Ç–æ—á–Ω—ñ.
          </p>
        </div>
      )}

      {/* –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—É */}
      {hasManualInput && state.preserveManualInput && (
        <div className="text-sm text-amber-600 bg-amber-50 p-3 rounded-md">
          <div className="flex items-center">
            <svg className="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
            </svg>
            <span className="font-medium">–ó–∞—Ö–∏—Å—Ç —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥—É –∞–∫—Ç–∏–≤–Ω–∏–π</span>
          </div>
          <p className="mt-1 text-xs">
            –ü–æ–ª—è, —è–∫—ñ –≤–∏ –≤–≤–µ–ª–∏ –≤—Ä—É—á–Ω—É, –Ω–µ –±—É–¥—É—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω—ñ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—î—é.
          </p>
          {coordinates && (
            <button
              type="button"
              onClick={handleForceGeocode}
              className="mt-2 text-xs underline hover:no-underline"
            >
              –ü—Ä–∏–º—É—Å–æ–≤–æ –æ–Ω–æ–≤–∏—Ç–∏ –∑ –ø–æ—Ç–æ—á–Ω–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            </button>
          )}
        </div>
      )}

      {/* Debug —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è */}
      {showDebugInfo && (
        <div className="bg-gray-100 p-3 rounded-md text-xs">
          <details>
            <summary className="cursor-pointer font-medium">Debug —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è</summary>
            <div className="mt-2 space-y-1">
              <div><strong>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏:</strong> {coordinates ? `${coordinates.latitude}, ${coordinates.longitude}` : '–ù–µ–º–∞—î'}</div>
              <div><strong>–î–∂–µ—Ä–µ–ª–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:</strong> {state.sources.coordinates?.type || '–ù–µ–º–∞—î'}</div>
              <div><strong>–î–∂–µ—Ä–µ–ª–æ –∫—Ä–∞—ó–Ω–∏:</strong> {state.sources.country?.type || '–ù–µ–º–∞—î'}</div>
              <div><strong>–î–∂–µ—Ä–µ–ª–æ –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É:</strong> {state.sources.locationName?.type || '–ù–µ–º–∞—î'}</div>
              <div><strong>–ó–∞—Ö–∏—Å—Ç —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥—É:</strong> {state.preserveManualInput ? '–¢–∞–∫' : '–ù—ñ'}</div>
              <div><strong>–ì–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è:</strong> {state.isGeocodingInProgress ? '–í –ø—Ä–æ—Ü–µ—Å—ñ' : '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'}</div>
            </div>
          </details>
        </div>
      )}
    </div>
  );
};

export default LocationManager;

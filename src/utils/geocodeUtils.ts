interface Country {
  id: number;
  name: string;
  code: string;
  latitude?: number;
  longitude?: number;
}

interface ProcessedAddress {
  country: Country;
  locationName: string;
  regionName: string;
  communityName: string; // –î–æ–¥–∞—î–º–æ –ø–æ–ª–µ –¥–ª—è –≥—Ä–æ–º–∞–¥–∏/–º—É–Ω—ñ—Ü–∏–ø–∞–ª—ñ—Ç–µ—Ç—É
}

/**
 * –ú–∞–ø–∞ –∫—Ä–∞—ó–Ω –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
 */
const COUNTRY_MAPPING: Record<string, string[]> = {
  'UA': ['ukraine', '—É–∫—Ä–∞—ó–Ω–∞', 'ua', 'ukr'],
  'PL': ['poland', '–ø–æ–ª—å—â–∞', 'pl', 'pol'],
  'DE': ['germany', '–Ω—ñ–º–µ—á—á–∏–Ω–∞', 'de', 'ger', 'deu'],
  'RO': ['romania', '—Ä—É–º—É–Ω—ñ—è', 'ro', 'rou'],
  'HU': ['hungary', '—É–≥–æ—Ä—â–∏–Ω–∞', 'hu', 'hun'],
  'SK': ['slovakia', '—Å–ª–æ–≤–∞—á—á–∏–Ω–∞', 'sk', 'svk'],
  'CZ': ['czech republic', 'czechia', '—á–µ—Ö—ñ—è', 'cz', 'cze'],
  'MD': ['moldova', '–º–æ–ª–¥–æ–≤–∞', 'md', 'mda'],
  'BY': ['belarus', '–±—ñ–ª–æ—Ä—É—Å—å', 'by', 'blr'],
  'LT': ['lithuania', '–ª–∏—Ç–≤–∞', 'lt', 'ltu'],
  'LV': ['latvia', '–ª–∞—Ç–≤—ñ—è', 'lv', 'lva'],
  'EE': ['estonia', '–µ—Å—Ç–æ–Ω—ñ—è', 'ee', 'est'],
};

/**
 * –û–±—Ä–æ–±–ª—è—î –∞–¥—Ä–µ—Å—É –∑ –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è —Ç–∞ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫—Ä–∞—ó–Ω—É
 */
export const processGeocodeAddress = (
  address: Record<string, string>,
  countries: Country[]
): ProcessedAddress | null => {
  try {
    console.log('üîç –ü–æ—á–∞—Ç–æ–∫ –æ–±—Ä–æ–±–∫–∏ –∞–¥—Ä–µ—Å–∏ –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è:', address);
    console.log('üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–¥—Ä–µ—Å–∏:', Object.keys(address));
    console.log('üîç Display name:', address.display_name);
    console.log('üîç –í—Å—ñ –ø–æ–ª—è –∞–¥—Ä–µ—Å–∏:', JSON.stringify(address, null, 2));
    
    // –ü–æ—à—É–∫ –∫—Ä–∞—ó–Ω–∏ –≤ –∞–¥—Ä–µ—Å—ñ
    const countryName = address.country || address.country_code || '';
    if (!countryName) {
      console.warn('–ö—Ä–∞—ó–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ –∞–¥—Ä–µ—Å—ñ:', address);
      return null;
    }

    console.log('üîç –ü–æ—à—É–∫ –∫—Ä–∞—ó–Ω–∏:', countryName, '–≤ —Å–ø–∏—Å–∫—É:', countries.map(c => `${c.name} (${c.code})`));

    // –ü–æ–∫—Ä–∞—â–µ–Ω–∏–π –ø–æ—à—É–∫ –∫—Ä–∞—ó–Ω–∏ –≤ —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫—Ä–∞—ó–Ω
    const country = countries.find(c => {
      const countryNameLower = countryName.toLowerCase();
      const countryCodeLower = c.code.toLowerCase();
      const countryDisplayNameLower = c.name.toLowerCase();
      
      // –ü—Ä—è–º–µ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è –Ω–∞–∑–≤–∏ –∞–±–æ –∫–æ–¥—É
      if (countryDisplayNameLower.includes(countryNameLower) || 
          countryCodeLower === countryNameLower) {
        return true;
      }
      
      // –ü–æ—à—É–∫ —á–µ—Ä–µ–∑ –º–∞–ø—É –∫—Ä–∞—ó–Ω
      const mappings = COUNTRY_MAPPING[c.code.toUpperCase()];
      if (mappings && mappings.some(mapping => mapping === countryNameLower)) {
        return true;
      }
      
      return false;
    });

    if (!country) {
      console.warn('–ö—Ä–∞—ó–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫—Ä–∞—ó–Ω:', countryName);
      console.warn('–î–æ—Å—Ç—É–ø–Ω—ñ –∫—Ä–∞—ó–Ω–∏:', countries.map(c => `${c.name} (${c.code})`));
      return null;
    }

    console.log('‚úÖ –ó–Ω–∞–π–¥–µ–Ω–∞ –∫—Ä–∞—ó–Ω–∞:', country);

    // –†–æ–∑—à–∏—Ä–µ–Ω–∏–π –ø–æ—à—É–∫ –Ω–∞–∑–≤–∏ –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É
    console.log('üè† –î–æ—Å—Ç—É–ø–Ω—ñ –ø–æ–ª—è –∞–¥—Ä–µ—Å–∏ –¥–ª—è –ø–æ—à—É–∫—É –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É:', {
      city: address.city,
      town: address.town,
      village: address.village,
      hamlet: address.hamlet,
      locality: address.locality,
      municipality: address.municipality,
      suburb: address.suburb,
      city_district: address.city_district,
      district: address.district,
      county: address.county,
      state_district: address.state_district,
      postcode: address.postcode,
      road: address.road,
      house_number: address.house_number,
      display_name: address.display_name
    });

    console.log('üèõÔ∏è –î–æ—Å—Ç—É–ø–Ω—ñ –ø–æ–ª—è –∞–¥—Ä–µ—Å–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏—Ö –æ–¥–∏–Ω–∏—Ü—å:', {
      state: address.state,
      region: address.region,
      province: address.province,
      county: address.county,
      municipality: address.municipality,
      city_district: address.city_district,
      district: address.district,
      administrative: address.administrative
    });

    // –ü–æ–ª—ñ–ø—à–µ–Ω–∞ –ª–æ–≥—ñ–∫–∞ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É
    let locationName = '';
    
    // –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –Ω–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç –≤ –ø–æ—Ä—è–¥–∫—É –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É
    const locationPriority = [
      address.city,
      address.town,
      address.village,
      address.hamlet,
      address.locality
    ];
    
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–µ—Ä—à–∏–π –Ω–µ–ø–æ—Ä–æ–∂–Ω—ñ–π –Ω–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç
    locationName = locationPriority.filter(Boolean)[0] || '';
    
    console.log('üîç –ü–µ—Ä—à–∞ —Å–ø—Ä–æ–±–∞ –ø–æ—à—É–∫—É –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É:', locationName);
    
    // –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏, –ø—Ä–æ–±—É—î–º–æ —ñ–Ω—à—ñ –ø–æ–ª—è
    if (!locationName) {
      console.log('üîç –î—Ä—É–≥–∞ —Å–ø—Ä–æ–±–∞ - –ø–æ—à—É–∫ —É –≤—Ç–æ—Ä–∏–Ω–Ω–∏—Ö –ø–æ–ª—è—Ö');
      const secondaryPriority = [
        address.municipality,
        address.suburb,
        address.city_district,
        address.county
      ];
      locationName = secondaryPriority.filter(Boolean)[0] || '';
      console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –¥—Ä—É–≥–æ—ó —Å–ø—Ä–æ–±–∏:', locationName);
    }
    
    // –Ø–∫—â–æ –≤—Å–µ —â–µ –Ω–µ –∑–Ω–∞–π—à–ª–∏, —Å–ø—Ä–æ–±—É—î–º–æ —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ display_name
    if (!locationName && address.display_name) {
      console.log('üîç –¢—Ä–µ—Ç—è —Å–ø—Ä–æ–±–∞ - —Ä–æ–∑–±—ñ—Ä display_name');
      const displayParts = address.display_name.split(',').map(part => part.trim());
      console.log('üîç –†–æ–∑–±–∏—Ä–∞—î–º–æ display_name:', displayParts);
      
      // –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –ª–æ–≥—ñ–∫–∞ –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –∞–¥—Ä–µ—Å
      // –ó–∞–∑–≤–∏—á–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: [–≤—É–ª–∏—Ü—è], [–Ω–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç], [—Ä–∞–π–æ–Ω], [–æ–±–ª–∞—Å—Ç—å], [–∫—Ä–∞—ó–Ω–∞]
      if (displayParts.length >= 2) {
        // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä—à—É —á–∞—Å—Ç–∏–Ω—É, —è–∫—â–æ –≤–æ–Ω–∞ —Å—Ö–æ–∂–∞ –Ω–∞ –≤—É–ª–∏—Ü—é –∞–±–æ –Ω–æ–º–µ—Ä
        let startIndex = 0;
        const firstPart = displayParts[0];
        
        if (firstPart && (
          /^\d+/.test(firstPart) || // –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ —á–∏—Å–ª–∞
          firstPart.toLowerCase().includes('–≤—É–ª–∏—Ü—è') ||
          firstPart.toLowerCase().includes('–ø—Ä–æ—Å–ø–µ–∫—Ç') ||
          firstPart.toLowerCase().includes('–±—É–ª—å–≤–∞—Ä') ||
          firstPart.toLowerCase().includes('–ø–ª–æ—â–∞') ||
          firstPart.toLowerCase().includes('street') ||
          firstPart.toLowerCase().includes('road')
        )) {
          startIndex = 1;
        }
        
        // –ë–µ—Ä–µ–º–æ –Ω–∞—Å—Ç—É–ø–Ω—É —á–∞—Å—Ç–∏–Ω—É —è–∫ –Ω–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç
        for (let i = startIndex; i < displayParts.length; i++) {
          const part = displayParts[i];
          
          // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ part —ñ—Å–Ω—É—î
          if (!part) continue;
          
          // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ —Ç–∞ –∫—Ä–∞—ó–Ω–∏
          if (!/^\d+\.\d+/.test(part) && 
              !COUNTRY_MAPPING[part.toUpperCase()] && 
              !part.toLowerCase().includes('—É–∫—Ä–∞—ó–Ω–∞') &&
              !part.toLowerCase().includes('ukraine') &&
              part.length > 2) {
            locationName = part;
            console.log('üîç –ó–Ω–∞–π–¥–µ–Ω–∞ –Ω–∞–∑–≤–∞ –∑ display_name:', locationName);
            break;
          }
        }
      }
    }
    
    // –Ø–∫—â–æ –≤—Å–µ —â–µ –ø–æ—Ä–æ–∂–Ω—å–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±—ñ–ª—å—à —Ä–æ–∑—É–º–Ω–∏–π —Ä–µ–∑–µ—Ä–≤
    if (!locationName) {
      console.log('üîç –ß–µ—Ç–≤–µ—Ä—Ç–∞ —Å–ø—Ä–æ–±–∞ - —Ä–æ–∑—É–º–Ω–∏–π —Ä–µ–∑–µ—Ä–≤');
      // –°–ø—Ä–æ–±—É—î–º–æ –≤–∑—è—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—é —á–∞—Å—Ç–∏–Ω—É display_name (–∑–∞–∑–≤–∏—á–∞–π –Ω–∞–π–±—ñ–ª—å—à–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞ –æ–¥–∏–Ω–∏—Ü—è)
      if (address.display_name) {
        const parts = address.display_name.split(',').map(p => p.trim());
        console.log('üîç –ß–∞—Å—Ç–∏–Ω–∏ –¥–ª—è —Ä–µ–∑–µ—Ä–≤—É:', parts);
        
        // –ë–µ—Ä–µ–º–æ –ø–µ—Ä–µ–¥–æ—Å—Ç–∞–Ω–Ω—é —á–∞—Å—Ç–∏–Ω—É, —è–∫—â–æ –æ—Å—Ç–∞–Ω–Ω—è - —Ü–µ –∫—Ä–∞—ó–Ω–∞
        const lastPart = parts[parts.length - 1] || '';
        const secondLastPart = parts[parts.length - 2] || '';
        
        if (COUNTRY_MAPPING[lastPart.toUpperCase()] || lastPart.toLowerCase().includes('—É–∫—Ä–∞—ó–Ω–∞')) {
          locationName = secondLastPart || '–ù–µ–≤—ñ–¥–æ–º–µ –º—ñ—Å—Ü–µ';
        } else {
          locationName = lastPart || '–ù–µ–≤—ñ–¥–æ–º–µ –º—ñ—Å—Ü–µ';
        }
        console.log('üîç –†–µ–∑–µ—Ä–≤–Ω–∞ –Ω–∞–∑–≤–∞:', locationName);
      } else {
        locationName = '–ù–µ–≤—ñ–¥–æ–º–µ –º—ñ—Å—Ü–µ';
      }
    }

    console.log('üè† –û–±—Ä–∞–Ω–∞ –Ω–∞–∑–≤–∞ –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É:', locationName);

    if (!locationName) {
      console.warn('–ù–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –≤ –∞–¥—Ä–µ—Å—ñ:', address);
      return null;
    }

    // –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ —Ä–µ–≥—ñ–æ–Ω—É (–æ–±–ª–∞—Å—Ç—å/—à—Ç–∞—Ç/–ø—Ä–æ–≤—ñ–Ω—Ü—ñ—è) –∑ –ø–æ–ª—ñ–ø—à–µ–Ω–∏–º –ø–æ—à—É–∫–æ–º
    console.log('üîç –ü–æ—à—É–∫ —Ä–µ–≥—ñ–æ–Ω—É –≤ –ø–æ–ª—è—Ö:', {
      state: address.state,
      region: address.region,
      province: address.province,
      county: address.county,
      'ISO3166-2-lvl4': address['ISO3166-2-lvl4'],
      'addr:state': address['addr:state']
    });

    const regionName = [
      address.state,
      address.region,
      address.province,
      address.county,
      address['ISO3166-2-lvl4'], // –î–æ–¥–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç ISO
      address['addr:state'] // OpenStreetMap –∞–¥—Ä–µ—Å–Ω–∞ —Å—Ö–µ–º–∞
    ].filter(Boolean)[0] || '';

    // –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ –≥—Ä–æ–º–∞–¥–∏/–º—É–Ω—ñ—Ü–∏–ø–∞–ª—ñ—Ç–µ—Ç—É/—Ä–∞–π–æ–Ω—É –∑ –ø–æ–ª—ñ–ø—à–µ–Ω–∏–º –ø–æ—à—É–∫–æ–º
    console.log('üîç –ü–æ—à—É–∫ –≥—Ä–æ–º–∞–¥–∏ –≤ –ø–æ–ª—è—Ö:', {
      municipality: address.municipality,
      city_district: address.city_district,
      district: address.district,
      county: address.county,
      suburb: address.suburb,
      'addr:district': address['addr:district'],
      'addr:subdistrict': address['addr:subdistrict']
    });

    const communityName = [
      address.municipality,
      address.city_district,
      address.district,
      address.suburb,
      address['addr:district'], // OpenStreetMap –∞–¥—Ä–µ—Å–Ω–∞ —Å—Ö–µ–º–∞
      address['addr:subdistrict'], // –ü—ñ–¥—Ä–∞–π–æ–Ω
      address.county
    ].filter(Boolean).find(item => item !== regionName) || '';

    console.log('üèõÔ∏è –ó–Ω–∞–π–¥–µ–Ω—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ñ –æ–¥–∏–Ω–∏—Ü—ñ:', {
      regionName,
      communityName
    });

    return {
      country,
      locationName: locationName.trim(),
      regionName: regionName.trim(),
      communityName: communityName.trim()
    };
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∞–¥—Ä–µ—Å–∏ –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è:', error);
    return null;
  }
};

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —î –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –≤–∞–ª—ñ–¥–Ω–∏–º–∏
 */
export const isValidCoordinates = (lat: number | null | undefined, lng: number | null | undefined): boolean => {
  return typeof lat === 'number' && typeof lng === 'number' && 
         lat >= -90 && lat <= 90 && lng >= -180 && lng <= 180;
};

/**
 * –§–æ—Ä–º–∞—Ç—É—î –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
 */
export const formatCoordinates = (lat: number | null | undefined, lng: number | null | undefined): string => {
  if (!isValidCoordinates(lat, lng)) {
    return '–ù–µ–≤—ñ–¥–æ–º—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏';
  }
  return `${lat!.toFixed(6)}, ${lng!.toFixed(6)}`;
};

import { useState, useCallback } from 'react';

interface GeolocationState {
  userLatitude: number | null;
  userLongitude: number | null;
  loading: boolean;
  error: GeolocationPositionError | null;
}

interface GeolocationHook {
  state: GeolocationState;
  requestLocation: () => void;
  clearError: () => void;
}

export const useGeolocation = (): GeolocationHook => {
  const [state, setState] = useState<GeolocationState>({
    userLatitude: null,
    userLongitude: null,
    loading: false,
    error: null,
  });

  const clearError = useCallback(() => {
    setState(prev => ({ ...prev, error: null }));
  }, []);

  const requestLocation = useCallback(() => {
    if (!navigator.geolocation) {
      console.warn('–ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è —Ü–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º');
      return;
    }

    setState(prev => ({ ...prev, loading: true, error: null }));

    navigator.geolocation.getCurrentPosition(
      (position) => {
        const { latitude, longitude } = position.coords;
        console.log('–ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞:', { latitude, longitude });
        
        setState({
          userLatitude: latitude,
          userLongitude: longitude,
          loading: false,
          error: null,
        });
      },
      (error) => {
        console.warn('–ü–æ–º–∏–ª–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó:', error);
        setState(prev => ({
          ...prev,
          loading: false,
          error,
        }));
      },
      {
        enableHighAccuracy: true,
        timeout: 15000,
        maximumAge: 300000, // 5 —Ö–≤–∏–ª–∏–Ω
      }
    );
  }, []);

  return {
    state,
    requestLocation,
    clearError,
  };
};

// –•—É–∫ –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è –∑ —Ä–µ–∑–µ—Ä–≤–Ω–∏–º–∏ –≤–∞—Ä—ñ–∞–Ω—Ç–∞–º–∏
export const useReverseGeocode = () => {
  const [loading, setLoading] = useState(false);

  // –§—É–Ω–∫—Ü—ñ—è –∑ —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è fetch –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–æ—é –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫
  const fetchWithTimeout = async (url: string, timeout: number = 10000) => {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => {
      console.log(`‚è∞ –¢–∞–π–º–∞—É—Ç ${timeout}ms –¥–ª—è URL: ${url}`);
      controller.abort();
    }, timeout);
    
    try {
      const response = await fetch(url, {
        signal: controller.signal,
        headers: {
          'User-Agent': 'Toagro/1.0 (https://toagro.com)',
          'Accept': 'application/json',
          'Cache-Control': 'no-cache'
        }
      });
      clearTimeout(timeoutId);
      return response;
    } catch (error) {
      clearTimeout(timeoutId);
      
      // –ü–æ–ª—ñ–ø—à–µ–Ω–∞ –æ–±—Ä–æ–±–∫–∞ —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –ø–æ–º–∏–ª–æ–∫
      if (error instanceof Error) {
        if (error.name === 'AbortError') {
          console.warn(`üö´ –ó–∞–ø–∏—Ç —Å–∫–∞—Å–æ–≤–∞–Ω–æ (timeout ${timeout}ms): ${url}`);
          throw new Error(`–¢–∞–π–º–∞—É—Ç –∑–∞–ø–∏—Ç—É (${timeout}ms)`);
        } else if (error.message.includes('NetworkError') || error.message.includes('Failed to fetch')) {
          console.warn(`üåê –ú–µ—Ä–µ–∂–µ–≤–∞ –ø–æ–º–∏–ª–∫–∞: ${url}`);
          throw new Error('–ú–µ—Ä–µ–∂–µ–≤–∞ –ø–æ–º–∏–ª–∫–∞');
        } else {
          console.warn(`‚ùå –ü–æ–º–∏–ª–∫–∞ fetch: ${error.message}`);
          throw error;
        }
      }
      
      throw error;
    }
  };

  const geocodeCoordinates = useCallback(async (lat: number, lng: number) => {
    setLoading(true);
    
    console.log(`üåç –ü–æ—á–∞—Ç–æ–∫ –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: ${lat}, ${lng}`);
    
    // –°–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤ –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è –∑ —Ä—ñ–∑–Ω–∏–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
    const geocodingServices = [
      {
        name: 'Nominatim OSM',
        url: `https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}&zoom=18&addressdetails=1&accept-language=uk,en`,
        timeout: 8000,
        parseResponse: (data: unknown) => data
      },
      {
        name: 'Photon Komoot',
        url: `https://photon.komoot.io/reverse?lat=${lat}&lon=${lng}&lang=uk`,
        timeout: 6000,
        parseResponse: (data: unknown) => {
          // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å Photon —É —Ñ–æ—Ä–º–∞—Ç Nominatim
          const photonData = data as { features?: Array<{ properties?: Record<string, unknown> }> };
          if (photonData.features && photonData.features[0]) {
            const feature = photonData.features[0];
            return {
              address: feature.properties || {},
              display_name: (feature.properties?.name as string) || `${lat}, ${lng}`
            };
          }
          return null;
        }
      },
      {
        name: 'Nominatim Qwant',
        url: `https://nominatim.qwant.com/v1/reverse?format=json&lat=${lat}&lon=${lng}&zoom=18&addressdetails=1&accept-language=uk,en`,
        timeout: 10000,
        parseResponse: (data: unknown) => data
      }
    ];

    let lastError: Error | null = null;

    // –ü—Ä–æ–±—É—î–º–æ –∫–æ–∂–Ω–∏–π —Å–µ—Ä–≤—ñ—Å –ø–æ —á–µ—Ä–∑—ñ
    for (const service of geocodingServices) {
      try {
        console.log(`üåê –°–ø—Ä–æ–±–∞ –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ ${service.name} (timeout: ${service.timeout}ms):`, service.url);
        
        const response = await fetchWithTimeout(service.url, service.timeout);
        
        if (!response.ok) {
          const errorMsg = `HTTP ${response.status}: ${response.statusText}`;
          console.warn(`‚ùå ${service.name} HTTP –ø–æ–º–∏–ª–∫–∞:`, errorMsg);
          throw new Error(errorMsg);
        }
        
        const rawResult = await response.json();
        console.log(`üìù –°–∏—Ä–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ ${service.name}:`, rawResult);
        
        const result = service.parseResponse(rawResult) as { address?: unknown; display_name?: string } | null;
        
        if (result && (result.address || result.display_name)) {
          console.log(`‚úÖ –ì–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ —á–µ—Ä–µ–∑ ${service.name}:`, result);
          setLoading(false);
          return result;
        } else {
          console.warn(`‚ö†Ô∏è –ü–æ—Ä–æ–∂–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ ${service.name}:`, rawResult);
          throw new Error(`–ü–æ—Ä–æ–∂–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ ${service.name}`);
        }
        
      } catch (error) {
        const errorMsg = error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞';
        console.warn(`‚ùå –ü–æ–º–∏–ª–∫–∞ ${service.name}:`, errorMsg);
        lastError = error instanceof Error ? error : new Error(errorMsg);
        
        // –Ø–∫—â–æ —Ü–µ –Ω–µ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Å–µ—Ä–≤—ñ—Å, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ
        if (service !== geocodingServices[geocodingServices.length - 1]) {
          console.log(`üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É...`);
          await new Promise(resolve => setTimeout(resolve, 500)); // –ö–æ—Ä–æ—Ç–∫–∞ –ø–∞—É–∑–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
          continue;
        }
      }
    }

    // –Ø–∫—â–æ –≤—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∏, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –º–æ–∫-–¥–∞–Ω—ñ
    console.error('‚ùå –í—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏ –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∏:', lastError?.message || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞');
    
    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –±–∞–∑–æ–≤—ñ –¥–∞–Ω—ñ –∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
    const mockResult = {
      address: {
        country: '–£–∫—Ä–∞—ó–Ω–∞',
        country_code: 'ua',
        city: `–ú—ñ—Å—Ç–æ ${lat.toFixed(2)}`,
        state: '–ù–µ–≤—ñ–¥–æ–º–∞ –æ–±–ª–∞—Å—Ç—å'
      },
      display_name: `${lat.toFixed(6)}, ${lng.toFixed(6)}`,
      lat: lat.toString(),
      lon: lng.toString()
    };
    
    console.log('üîß –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–µ–∑–µ—Ä–≤–Ω—ñ –¥–∞–Ω—ñ:', mockResult);
    setLoading(false);
    return mockResult;
    
  }, []);

  return {
    geocodeCoordinates,
    loading,
  };
};

import React, { useState, useEffect, useCallback, useRef } from "react";
import { useNavigate } from "react-router-dom";
import { useAppDispatch, useAppSelector } from "../store";
import { fetchCategories } from "../store/catalogSlice";
import { fetchBrands } from "../store/brandSlice";
import { createListing } from "../store/listingSlice";
import { fetchRegions, fetchCommunities } from "../store/locationSlice";
import { countriesAPI } from "../api/apiClient";
import { useGeolocation, useReverseGeocode } from "../hooks/useGeolocation";
import { handleApiError } from "../utils/errorHandler";
import { processGeocodeAddress } from "../utils/geocodeUtils";
import MotorizedSpecFormComponent, {
  initialMotorizedSpec,
  MotorizedSpecForm as MotorizedSpecFormType,
} from "../components/ui/MotorizedSpecForm";
import CategorySelector from "../components/ui/CategorySelector";
import BrandSelector from "../components/ui/BrandSelector";
import PriceInput from "../components/ui/PriceInput";
import ImageUploader from "../components/ui/ImageUploader";
import LocationSelector from "../components/ui/LocationSelector";
import GeolocationDebugPanel from "../components/ui/GeolocationDebugPanel";
import CoordinatesDisplay from "../components/ui/CoordinatesDisplay";
import GeolocationTester from "../components/ui/GeolocationTester";

// Constants
const MAX_IMAGE_SIZE_MB = 5;
const MIN_DESCRIPTION_LENGTH = 20;

// Types
type Currency = "UAH" | "USD" | "EUR";
type Condition = "NEW" | "USED";
type PriceType = "NETTO" | "BRUTTO";

interface Country {
  id: number;
  name: string;
  code: string;
  latitude?: number;
  longitude?: number;
}

interface FormData {
  title: string;
  description: string;
  price: string;
  currency: Currency;
  categoryId: string;
  categoryName: string;
  countryId: string;
  regionId: string;
  communityId: string;
  locationId: string;
  locationName: string;
  latitude: number | null;
  longitude: number | null;
  images: File[];
  condition: Condition;
  brandId: string;
  brandName: string;
  priceType: PriceType;
  vatIncluded: boolean;
  useMyLocation: boolean;
  userLatitude: number | null;
  userLongitude: number | null;
  mapClickCoordinatesChanged?: boolean; // –ü—Ä–∞–ø–æ—Ä –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–º—ñ–Ω –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —á–µ—Ä–µ–∑ –∫–∞—Ä—Ç—É
}

type FormErrors = Partial<Record<keyof FormData, string | undefined>>;

const CreateListingPage = () => {
  const dispatch = useAppDispatch();
  const navigate = useNavigate();
  const { categories } = useAppSelector((state) => state.catalog);
  const { isLoading } = useAppSelector((state) => state.listing);
  const { regions } = useAppSelector((state) => state.locations);
  
  // Custom hooks
  const geolocation = useGeolocation();
  const { geocodeCoordinates } = useReverseGeocode();

  // State
  const [countries, setCountries] = useState<Country[]>([]);
  const [countriesLoading, setCountriesLoading] = useState(false);
  const [countriesError, setCountriesError] = useState<string | null>(null);
  const [autoFilledFields, setAutoFilledFields] = useState<{
    countryId?: boolean;
    locationName?: boolean;
    regionId?: boolean;
  }>({});

  const [formData, setFormData] = useState<FormData>({
    title: "",
    description: "",
    price: "",
    currency: "UAH",
    categoryId: "",
    categoryName: "",
    countryId: "",
    regionId: "",
    communityId: "",
    locationId: "",
    locationName: "",
    latitude: null,
    longitude: null,
    images: [],
    condition: "USED",
    brandId: "",
    brandName: "",
    priceType: "NETTO",
    vatIncluded: false,
    useMyLocation: true,
    userLatitude: null,
    userLongitude: null,
  });

  const [motorizedSpec, setMotorizedSpec] = useState<MotorizedSpecFormType>(initialMotorizedSpec);
  const [errors, setErrors] = useState<FormErrors>({});
  const [isUploading, setIsUploading] = useState(false);
  const [mapLoaded, setMapLoaded] = useState(false);
  const [mapError, setMapError] = useState<string | null>(null);
  
  // Ref –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó
  const initialGeolocationProcessed = useRef(false);
  const [geocodingStatus, setGeocodingStatus] = useState<{
    isLoading: boolean;
    lastAttempt?: string;
    success: boolean;
  }>({
    isLoading: false,
    success: false
  });

  // –°—Ç–µ–π—Ç –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –ø–æ—à—É–∫—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏—Ö –æ–¥–∏–Ω–∏—Ü—å
  const [lastGeocodingResult, setLastGeocodingResult] = useState<{
    regionName: string;
    communityName: string;
    countryId: string;
  } | null>(null);

  // Load initial data
  useEffect(() => {
    if (categories.length === 0) {
      console.log("üè∑Ô∏è –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó...");
      dispatch(fetchCategories());
    }
    
    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –º–∞—Ä–∫–∏
    console.log("üöó –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –º–∞—Ä–∫–∏ —Ç–µ—Ö–Ω—ñ–∫–∏...");
    dispatch(fetchBrands())
      .unwrap()
      .then((brands) => {
        console.log("‚úÖ –ú–∞—Ä–∫–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ:", brands);
      })
      .catch((error) => {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–∞—Ä–æ–∫:", error);
      });
    
    if (!countries.length && !countriesLoading && !countriesError) {
      setCountriesLoading(true);
      console.log("üåç –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫—Ä–∞—ó–Ω–∏...");
      countriesAPI.getAll()
        .then((res) => {
          console.log("‚úÖ –ö—Ä–∞—ó–Ω–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ:", res.data.data);
          setCountries(res.data.data || []);
          setCountriesLoading(false);
        })
        .catch((error) => {
          setCountriesError("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫—Ä–∞—ó–Ω");
          setCountriesLoading(false);
          console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫—Ä–∞—ó–Ω:", error);
        });
    }
  }, [dispatch, categories.length, countries.length, countriesLoading, countriesError]);

  // Load Leaflet dynamically with improved error handling
  useEffect(() => {
    const loadLeaflet = async () => {
      if (mapLoaded || mapError || typeof window === "undefined") {
        return;
      }

      try {
        console.log("üó∫Ô∏è –ü–æ—á–∞—Ç–æ–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Leaflet...");

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ Leaflet –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π
        if (window.L) {
          console.log("‚úÖ Leaflet –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π");
          setMapLoaded(true);
          return;
        }

        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ CSS
        const loadCSS = () => {
          return new Promise<void>((resolve, reject) => {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ CSS –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π
            const existingCSS = document.querySelector('link[href*="leaflet.css"]');
            if (existingCSS) {
              console.log("‚úÖ Leaflet CSS –≤–∂–µ —ñ—Å–Ω—É—î");
              resolve();
              return;
            }

            const leafletCss = document.createElement("link");
            leafletCss.rel = "stylesheet";
            leafletCss.href = "https://unpkg.com/leaflet@1.9.4/dist/leaflet.css";
            leafletCss.integrity = "sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=";
            leafletCss.crossOrigin = "";
            
            leafletCss.onload = () => {
              console.log("‚úÖ Leaflet CSS –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ");
              resolve();
            };
            
            leafletCss.onerror = () => {
              console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Leaflet CSS");
              reject(new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å—Ç–∏–ª—ñ Leaflet"));
            };
            
            document.head.appendChild(leafletCss);
          });
        };

        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ JS
        const loadJS = () => {
          return new Promise<void>((resolve, reject) => {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ JS –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π
            const existingScript = document.querySelector('script[src*="leaflet.js"]');
            if (existingScript || window.L) {
              console.log("‚úÖ Leaflet JS –≤–∂–µ —ñ—Å–Ω—É—î");
              resolve();
              return;
            }

            const leafletScript = document.createElement("script");
            leafletScript.src = "https://unpkg.com/leaflet@1.9.4/dist/leaflet.js";
            leafletScript.integrity = "sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=";
            leafletScript.crossOrigin = "";
            
            leafletScript.onload = () => {
              console.log("‚úÖ Leaflet JS –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ");
              // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ Leaflet –¥–æ—Å—Ç—É–ø–Ω–∏–π
              if (window.L) {
                console.log("‚úÖ Leaflet L –æ–±'—î–∫—Ç –¥–æ—Å—Ç—É–ø–Ω–∏–π");
                resolve();
              } else {
                console.error("‚ùå Leaflet L –æ–±'—î–∫—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è");
                reject(new Error("Leaflet –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞–≤—Å—è"));
              }
            };
            
            leafletScript.onerror = () => {
              console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Leaflet JS");
              reject(new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–∫—Ä–∏–ø—Ç Leaflet"));
            };
            
            document.body.appendChild(leafletScript);
          });
        };

        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ CSS, –ø–æ—Ç—ñ–º JS
        await loadCSS();
        await loadJS();
        
        // –î–æ–¥–∞—î–º–æ –Ω–µ–≤–µ–ª–∏–∫—É –∑–∞—Ç—Ä–∏–º–∫—É –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ
        await new Promise(resolve => setTimeout(resolve, 200));
        
        console.log("üéâ Leaflet –ø–æ–≤–Ω—ñ—Å—Ç—é –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π");
        setMapLoaded(true);

      } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Leaflet:", error);
        setMapError(error instanceof Error ? error.message : "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Leaflet");
      }
    };

    loadLeaflet();
  }, [mapLoaded, mapError]);

  // Reverse geocoding handler
  const handleReverseGeocode = useCallback(async (lat: number, lng: number, forceUpdate = false) => {
    // –°—Ç–≤–æ—Ä—é—î–º–æ AbortController –¥–ª—è –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É
    const abortController = new AbortController();
    
    try {
      setGeocodingStatus({
        isLoading: true,
        lastAttempt: new Date().toLocaleTimeString(),
        success: false
      });
      
      if (!forceUpdate) {
        const hasCountry = !!formData.countryId;
        const hasLocationName = !!formData.locationName.trim();
        const hasRegion = !!formData.regionId;
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤—Å—ñ –æ—Å–Ω–æ–≤–Ω—ñ –ø–æ–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ (–∑–∞–ª–∏—à–∞—î–º–æ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –∞–≤—Ç–æ–∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ä–µ–≥—ñ–æ–Ω—É)
        if (hasCountry && hasLocationName) {
          console.log("‚ÑπÔ∏è –û—Å–Ω–æ–≤–Ω—ñ –ø–æ–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ, –∞–ª–µ –º–æ–∂–µ–º–æ –¥–æ–ø–æ–≤–Ω–∏—Ç–∏ —Ä–µ–≥—ñ–æ–Ω:", {
            countryId: formData.countryId,
            locationName: formData.locationName,
            regionId: formData.regionId || '–ù–ï –ó–ê–ü–û–í–ù–ï–ù–û'
          });
          
          // –Ø–∫—â–æ —Ä–µ–≥—ñ–æ–Ω –Ω–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–∏–π, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑ –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è–º –¥–ª—è –π–æ–≥–æ –ø–æ—à—É–∫—É
          if (!hasRegion) {
            console.log("üîÑ –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ä–µ–≥—ñ–æ–Ω—É");
          } else {
            setGeocodingStatus({ isLoading: false, success: true });
            return;
          }
        }
      }
      
      console.log(`üîÑ –ó–∞–ø—É—Å–∫ –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: ${lat}, ${lng}, force: ${forceUpdate}`);
      
      const result = await geocodeCoordinates(lat, lng);
      console.log("üìç –ü–æ–≤–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è:", result);
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–∞–ø–∏—Ç –±—É–≤ —Å–∫–∞—Å–æ–≤–∞–Ω–∏–π
      if (abortController.signal.aborted) {
        console.log('üö´ –ì–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º');
        setGeocodingStatus({ isLoading: false, success: false });
        return;
      }
      
      const address = (result?.address || {}) as Record<string, string>;
      console.log("üè† –ê–¥—Ä–µ—Å–∞ –¥–ª—è –æ–±—Ä–æ–±–∫–∏:", address);
      
      const processedAddress = processGeocodeAddress(address, countries);
      console.log("üîÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–æ–±–∫–∏ –∞–¥—Ä–µ—Å–∏:", processedAddress);
      
      if (processedAddress) {
        let updatedCountryId = formData.countryId;
        
        setFormData(prev => {
          const updates: Partial<FormData> = {};
          const fieldsUpdated: { countryId?: boolean; locationName?: boolean; regionId?: boolean } = {};
          
          if ((!prev.countryId || forceUpdate) && processedAddress.country) {
            updates.countryId = String(processedAddress.country.id);
            updatedCountryId = String(processedAddress.country.id); // –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ processedAddress
            fieldsUpdated.countryId = true;
          }
          
          if ((!prev.locationName.trim() || forceUpdate) && processedAddress.locationName) {
            updates.locationName = processedAddress.locationName;
            fieldsUpdated.locationName = true;
          }

          // –õ–æ–≥—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –ø–æ—à—É–∫—É —Ä–µ–≥—ñ–æ–Ω—ñ–≤ —Ç–∞ –≥—Ä–æ–º–∞–¥
          console.log("üîÑ –î–∞–Ω—ñ –¥–ª—è –ø–æ—à—É–∫—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏—Ö –æ–¥–∏–Ω–∏—Ü—å:", {
            regionName: processedAddress.regionName,
            communityName: processedAddress.communityName,
            countryId: updatedCountryId
          });
          
          if (Object.keys(fieldsUpdated).length > 0) {
            setAutoFilledFields(prevAutoFilled => ({
              ...prevAutoFilled,
              ...fieldsUpdated
            }));
          }
          
          return {
            ...prev,
            ...updates,
            latitude: lat,
            longitude: lng,
          };
        });
        
        setGeocodingStatus({
          isLoading: false,
          lastAttempt: new Date().toLocaleTimeString(),
          success: true
        });

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –ø–æ—à—É–∫—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏—Ö –æ–¥–∏–Ω–∏—Ü—å
        if (processedAddress.regionName || processedAddress.communityName) {
          console.log("üìç –í–∏—è–≤–ª–µ–Ω—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –ø–æ—à—É–∫—É:", {
            regionName: processedAddress.regionName,
            communityName: processedAddress.communityName,
            countryId: updatedCountryId
          });
          
          // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π countryId (–∞–±–æ –ø–æ—Ç–æ—á–Ω–∏–π, —è–∫—â–æ –∫—Ä–∞—ó–Ω–∞ –Ω–µ –∑–º—ñ–Ω–∏–ª–∞—Å—è)
          const finalCountryId = updatedCountryId || formData.countryId;
          
          if (finalCountryId) {
            setLastGeocodingResult({
              regionName: processedAddress.regionName,
              communityName: processedAddress.communityName,
              countryId: finalCountryId
            });
          } else {
            console.warn("‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ–π countryId –¥–ª—è –ø–æ—à—É–∫—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏—Ö –æ–¥–∏–Ω–∏—Ü—å");
          }
        } else {
          console.log("‚ÑπÔ∏è –ù–µ–º–∞—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è");
        }
      }
    } catch (error) {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–∞–ø–∏—Ç –±—É–≤ —Å–∫–∞—Å–æ–≤–∞–Ω–∏–π
      if (abortController.signal.aborted) {
        console.log('üö´ –ì–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ');
        setGeocodingStatus({ isLoading: false, success: false });
        return;
      }

      // –ü–æ–ª—ñ–ø—à–µ–Ω–∞ –æ–±—Ä–æ–±–∫–∞ —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –ø–æ–º–∏–ª–æ–∫
      let errorMessage = '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è';
      
      if (error instanceof Error) {
        if (error.message.includes('AbortError') || error.message.includes('signal is aborted')) {
          console.log('üö´ –ì–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ (AbortError)');
          setGeocodingStatus({ isLoading: false, success: false });
          return;
        } else if (error.message.includes('NetworkError') || error.message.includes('Failed to fetch')) {
          errorMessage = '–ú–µ—Ä–µ–∂–µ–≤–∞ –ø–æ–º–∏–ª–∫–∞ –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è';
        } else if (error.message.includes('–¢–∞–π–º–∞—É—Ç')) {
          errorMessage = '–¢–∞–π–º–∞—É—Ç –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è';
        } else {
          errorMessage = error.message;
        }
      }

      console.warn("‚ö†Ô∏è –ì–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è –Ω–µ—É—Å–ø—ñ—à–Ω–µ:", errorMessage);
      
      // –í—Å–µ –æ–¥–Ω–æ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è
      setFormData(prev => ({
        ...prev,
        latitude: lat,
        longitude: lng,
      }));
      
      setGeocodingStatus({
        isLoading: false,
        lastAttempt: new Date().toLocaleTimeString(),
        success: false
      });
    }
  }, [geocodeCoordinates, countries, formData.countryId, formData.locationName, formData.regionId]);

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –ø–æ—à—É–∫—É —Ä–µ–≥—ñ–æ–Ω—ñ–≤ —Ç–∞ –≥—Ä–æ–º–∞–¥
  const tryToMatchAdministrativeUnits = useCallback(async (
    regionName: string, 
    communityName: string, 
    countryId: string
  ) => {
    try {
      console.log("üîç –ü–æ—à—É–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏—Ö –æ–¥–∏–Ω–∏—Ü—å:", {
        regionName,
        communityName,
        countryId,
        currentRegionsCount: regions.length
      });

      if (!countryId || !regionName) {
        console.log("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ—à—É–∫ - –≤—ñ–¥—Å—É—Ç–Ω—ñ–π countryId –∞–±–æ regionName");
        return;
      }

      // –ó–∞–≤–∂–¥–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ä–µ–≥—ñ–æ–Ω–∏ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó –∫—Ä–∞—ó–Ω–∏
      console.log("üì• –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ä–µ–≥—ñ–æ–Ω–∏ –¥–ª—è –∫—Ä–∞—ó–Ω–∏:", countryId);
      let loadedRegions: Array<{ id: number; name: string; countryId?: number }>;
      
      try {
        loadedRegions = await dispatch(fetchRegions(Number(countryId))).unwrap();
        console.log("‚úÖ –†–µ–≥—ñ–æ–Ω–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ:", loadedRegions.length, "—à—Ç—É–∫");
        console.log("üìã –°–ø–∏—Å–æ–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö —Ä–µ–≥—ñ–æ–Ω—ñ–≤:", loadedRegions.map(r => r.name));
      } catch (regionsError) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ–≥—ñ–æ–Ω—ñ–≤:", regionsError);
        
        // –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∫–µ—à–æ–≤–∞–Ω—ñ —Ä–µ–≥—ñ–æ–Ω–∏, —è–∫—â–æ —î
        if (regions.length > 0) {
          console.log("üîÑ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ —Ä–µ–≥—ñ–æ–Ω–∏:", regions.length, "—à—Ç—É–∫");
          loadedRegions = regions;
        } else {
          console.log("‚ö†Ô∏è –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ä–µ–≥—ñ–æ–Ω—ñ–≤ –¥–ª—è –ø–æ—à—É–∫—É");
          return;
        }
      }

      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–≤—ñ–∂–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ —Ä–µ–≥—ñ–æ–Ω–∏ –¥–ª—è –ø–æ—à—É–∫—É
      const regionsToSearch = loadedRegions || regions;
      
      // –ü–æ–ª—ñ–ø—à–µ–Ω–∏–π –ø–æ—à—É–∫ —Ä–µ–≥—ñ–æ–Ω—É –∑–∞ –Ω–∞–∑–≤–æ—é
      if (regionName && regionsToSearch.length > 0) {
        console.log("üîç –®—É–∫–∞—î–º–æ —Ä–µ–≥—ñ–æ–Ω —Å–µ—Ä–µ–¥:", regionsToSearch.map(r => r.name));
        
        const foundRegion = regionsToSearch.find(region => {
          const regionNameLower = region.name.toLowerCase();
          const searchNameLower = regionName.toLowerCase();
          
          // –¢–æ—á–Ω–µ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è
          if (regionNameLower === searchNameLower) return true;
          
          // –û–¥–∏–Ω –º—ñ—Å—Ç–∏—Ç—å —ñ–Ω—à–∏–π
          if (regionNameLower.includes(searchNameLower) || searchNameLower.includes(regionNameLower)) return true;
          
          // –ü–æ—à—É–∫ –ø–æ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª–æ–≤–∞—Ö (–æ–±–ª–∞—Å—Ç—å, region, etc.)
          const regionWords = regionNameLower.split(/[\s,.-]+/);
          const searchWords = searchNameLower.split(/[\s,.-]+/);
          
          return regionWords.some((rWord: string) => 
            searchWords.some((sWord: string) => 
              (rWord.length > 2 && sWord.length > 2) && 
              (rWord.includes(sWord) || sWord.includes(rWord))
            )
          );
        });

        if (foundRegion) {
          console.log("‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —Ä–µ–≥—ñ–æ–Ω:", foundRegion);
          
          setFormData(prev => ({
            ...prev,
            regionId: String(foundRegion.id)
          }));

          // –ü–æ–∑–Ω–∞—á–∞—î–º–æ —Ä–µ–≥—ñ–æ–Ω —è–∫ –∞–≤—Ç–æ–∑–∞–ø–æ–≤–Ω–µ–Ω–∏–π
          setAutoFilledFields(prevAutoFilled => ({
            ...prevAutoFilled,
            regionId: true
          }));

          // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≥—Ä–æ–º–∞–¥–∏ –¥–ª—è –∑–Ω–∞–π–¥–µ–Ω–æ–≥–æ —Ä–µ–≥—ñ–æ–Ω—É
          if (communityName) {
            console.log("üì• –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≥—Ä–æ–º–∞–¥–∏ –¥–ª—è —Ä–µ–≥—ñ–æ–Ω—É:", foundRegion.id);
            
            try {
              const loadedCommunities = await dispatch(fetchCommunities(foundRegion.id)).unwrap();
              console.log("‚úÖ –ì—Ä–æ–º–∞–¥–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ:", loadedCommunities.length, "—à—Ç—É–∫");

              // –ü–æ–ª—ñ–ø—à–µ–Ω–∏–π –ø–æ—à—É–∫ –≥—Ä–æ–º–∞–¥–∏ –∑–∞ –Ω–∞–∑–≤–æ—é
              const foundCommunity = loadedCommunities.find(community => {
                const communityNameLower = community.name.toLowerCase();
                const searchCommunityLower = communityName.toLowerCase();
                
                // –¢–æ—á–Ω–µ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è
                if (communityNameLower === searchCommunityLower) return true;
                
                // –û–¥–∏–Ω –º—ñ—Å—Ç–∏—Ç—å —ñ–Ω—à–∏–π
                if (communityNameLower.includes(searchCommunityLower) || searchCommunityLower.includes(communityNameLower)) return true;
                
                // –ü–æ—à—É–∫ –ø–æ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª–æ–≤–∞—Ö
                const communityWords = communityNameLower.split(/[\s,.-]+/);
                const searchWords = searchCommunityLower.split(/[\s,.-]+/);
                
                return communityWords.some((cWord: string) => 
                  searchWords.some((sWord: string) => 
                    (cWord.length > 2 && sWord.length > 2) && 
                    (cWord.includes(sWord) || sWord.includes(cWord))
                  )
                );
              });

              if (foundCommunity) {
                console.log("‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –≥—Ä–æ–º–∞–¥—É:", foundCommunity);
                
                setFormData(prev => ({
                  ...prev,
                  communityId: String(foundCommunity.id)
                }));
              } else {
                console.log("‚ö†Ô∏è –ì—Ä–æ–º–∞–¥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ:", communityName, "—Å–µ—Ä–µ–¥:", loadedCommunities.map(c => c.name));
              }
            } catch (communitiesError) {
              console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≥—Ä–æ–º–∞–¥:", communitiesError);
            }
          }
        } else {
          console.log("‚ö†Ô∏è –†–µ–≥—ñ–æ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ:", regionName, "—Å–µ—Ä–µ–¥:", regionsToSearch.map(r => r.name));
        }
      } else {
        console.log("‚ö†Ô∏è –ù–µ–º–∞—î —Ä–µ–≥—ñ–æ–Ω—ñ–≤ –¥–ª—è –ø–æ—à—É–∫—É –∞–±–æ –ø—É—Å—Ç–∞ –Ω–∞–∑–≤–∞ —Ä–µ–≥—ñ–æ–Ω—É");
      }
    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏—Ö –æ–¥–∏–Ω–∏—Ü—å:", error);
    }
  }, [dispatch, regions]);

  // Auto geolocation on component mount
  useEffect(() => {
    if (countries.length > 0 && !geolocation.state.userLatitude && !geolocation.state.loading) {
      geolocation.requestLocation();
    }
  }, [countries.length, geolocation]);

  // Handle geolocation results
  useEffect(() => {
    if (geolocation.state.userLatitude != null && geolocation.state.userLongitude != null) {
      setFormData(prev => ({
        ...prev,
        userLatitude: geolocation.state.userLatitude,
        userLongitude: geolocation.state.userLongitude,
        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ —â–µ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ 
        // –∞–±–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —è–≤–Ω–æ —Ö–æ—á–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Å–≤–æ—é –ª–æ–∫–∞—Ü—ñ—é
        ...(prev.useMyLocation && prev.latitude === null && prev.longitude === null && {
          latitude: geolocation.state.userLatitude,
          longitude: geolocation.state.userLongitude,
        }),
      }));

      // –ó–∞–ø—É—Å–∫–∞—î–º–æ –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –ø–æ—á–∞—Ç–∫–æ–≤–æ–º—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
      if (!initialGeolocationProcessed.current) {
        console.log("üéØ –ü–æ—á–∞—Ç–∫–æ–≤–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è - –∑–∞–ø—É—Å–∫–∞—î–º–æ –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è –¥–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó");
        initialGeolocationProcessed.current = true;
        handleReverseGeocode(
          geolocation.state.userLatitude, 
          geolocation.state.userLongitude, 
          true
        );
      }
    }
  }, [geolocation.state.userLatitude, geolocation.state.userLongitude, handleReverseGeocode]);

  // –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–º—ñ–Ω –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —á–µ—Ä–µ–∑ –∫–ª—ñ–∫ –Ω–∞ –∫–∞—Ä—Ç—ñ
  useEffect(() => {
    if (formData.mapClickCoordinatesChanged && 
        formData.latitude !== null && 
        formData.longitude !== null) {
      
      console.log("üîÑ –î–µ—Ç–µ–∫—Ç–æ–≤–∞–Ω–æ –∑–º—ñ–Ω—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —á–µ—Ä–µ–∑ –∫–∞—Ä—Ç—É, –∑–∞–ø—É—Å–∫–∞—î–º–æ –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è");
      
      // –°–∫–∏–¥–∞—î–º–æ –ø—Ä–∞–ø–æ—Ä
      setFormData(prev => ({
        ...prev,
        mapClickCoordinatesChanged: false
      }));
      
      // –ó–∞–ø—É—Å–∫–∞—î–º–æ –∑–≤–æ—Ä–æ—Ç–Ω–µ –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è –∑ —Ñ–æ—Ä—Å—É–≤–∞–Ω–Ω—è–º
      handleReverseGeocode(formData.latitude, formData.longitude, true);
    }
  }, [formData.mapClickCoordinatesChanged, formData.latitude, formData.longitude, handleReverseGeocode]);

  // –û–±—Ä–æ–±–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–æ—à—É–∫—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏—Ö –æ–¥–∏–Ω–∏—Ü—å
  useEffect(() => {
    if (lastGeocodingResult) {
      console.log("üîç –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ—à—É–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏—Ö –æ–¥–∏–Ω–∏—Ü—å:", lastGeocodingResult);
      
      tryToMatchAdministrativeUnits(
        lastGeocodingResult.regionName,
        lastGeocodingResult.communityName,
        lastGeocodingResult.countryId
      );
      
      // –°–∫–∏–¥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏
      setLastGeocodingResult(null);
    }
  }, [lastGeocodingResult, tryToMatchAdministrativeUnits]);

  // Form handlers
  const handleInputChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>
  ) => {
    const { name, value, type } = e.target;
    const checked = type === "checkbox" ? (e.target as HTMLInputElement).checked : undefined;

    if (name === "categoryId") {
      const selectedCategory = categories.find((cat) => cat.id === Number(value));
      setFormData({
        ...formData,
        [name]: value,
        categoryName: selectedCategory ? selectedCategory.name : "",
      });
    } else if (name === "vatIncluded") {
      setFormData({
        ...formData,
        vatIncluded: !!checked,
      });
    } else {
      setFormData({
        ...formData,
        [name]: value,
      });
    }

    if (errors[name as keyof FormErrors]) {
      setErrors({
        ...errors,
        [name]: undefined,
      });
    }
  };

  const handleMotorizedSpecChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>
  ) => {
    const { name, value, type } = e.target;
    const checked = (e.target as HTMLInputElement).checked;
    setMotorizedSpec((prev) => ({
      ...prev,
      [name]: type === "checkbox" ? checked : value,
    }));
  };

  const handleLocationChange = (name: string, value: string | number) => {
    if (name === "countryId" || name === "locationName" || name === "regionId") {
      setAutoFilledFields(prev => ({
        ...prev,
        [name]: false
      }));
    }

    if (name === "countryId") {
      setFormData({
        ...formData,
        countryId: String(value),
        regionId: "",
        communityId: "",
        locationId: "",
      });
    } else if (name === "regionId") {
      setFormData({
        ...formData,
        regionId: String(value),
        communityId: "",
        locationId: "",
      });
    } else if (name === "communityId") {
      setFormData({
        ...formData,
        communityId: String(value),
        locationId: "",
      });
    } else if (name === "latitude" || name === "longitude") {
      setFormData({
        ...formData,
        [name]: typeof value === "number" ? value : parseFloat(value),
      });
    } else {
      setFormData({
        ...formData,
        [name]: String(value),
      });
    }

    if (errors[name as keyof FormErrors]) {
      setErrors({
        ...errors,
        [name]: undefined,
      });
    }
  };

  const handleMapCoordinatesChange = (name: string, value: string | number) => {
    console.log("üó∫Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∫–ª—ñ–∫–Ω—É–≤ –Ω–∞ –∫–∞—Ä—Ç—ñ:", name, "–∑–Ω–∞—á–µ–Ω–Ω—è:", value);
    
    if (name === "latitude" || name === "longitude") {
      const coordValue = typeof value === "number" ? value : parseFloat(value);
      
      // –í–∏–º–∏–∫–∞—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó –ø—Ä–∏ —Ä—É—á–Ω–æ–º—É –∫–ª—ñ–∫—É –Ω–∞ –∫–∞—Ä—Ç—ñ
      setFormData(prev => ({
        ...prev,
        [name]: coordValue,
        useMyLocation: false, // –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—Ä—É—á–Ω—É –≤—Å—Ç–∞–Ω–æ–≤–∏–≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
        // –î–æ–¥–∞—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π –ø—Ä–∞–ø–æ—Ä –¥–ª—è —ñ–Ω–¥–∏–∫–∞—Ü—ñ—ó, —â–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∑–º—ñ–Ω–µ–Ω—ñ —á–µ—Ä–µ–∑ –∫–∞—Ä—Ç—É
        mapClickCoordinatesChanged: true
      }));
      
      console.log("üîÑ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω—ñ –∑ –∫–∞—Ä—Ç–∏, useMyLocation –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ false");
    }
  };

  const handleBrandSelect = (brandId: string, brandName: string) => {
    setFormData({
      ...formData,
      brandId,
      brandName,
    });

    if (errors.brandId) {
      setErrors(prev => {
        const { brandId: _, ...rest } = prev;
        return rest;
      });
    }
  };

  const handleRemoveImage = (index: number) => {
    const newImages = [...formData.images];
    newImages.splice(index, 1);
    setFormData({
      ...formData,
      images: newImages,
    });
  };

  const handleImagesChange = (newImages: (File | string)[]) => {
    // Filter out string images as they're handled separately
    const fileImages = newImages.filter((img): img is File => img instanceof File);
    
    // Validate image size
    const oversizedImages = fileImages.filter(
      img => img.size > MAX_IMAGE_SIZE_MB * 1024 * 1024
    );

    if (oversizedImages.length > 0) {
      setErrors({
        ...errors,
        images: `–î–µ—è–∫—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–≤–∏—â—É—é—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä ${MAX_IMAGE_SIZE_MB}MB`,
      });
      return;
    }

    setFormData({
      ...formData,
      images: fileImages,
    });

    if (errors.images) {
      setErrors({
        ...errors,
        images: undefined,
      });
    }
  };

  // Form validation
  const validateForm = (): boolean => {
    console.log("üîç –ü–æ—á–∞—Ç–æ–∫ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Ñ–æ—Ä–º–∏");
    console.log("üìä –ü–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ —Ñ–æ—Ä–º–∏ –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó:", {
      title: formData.title,
      brandId: formData.brandId,
      description: `"${formData.description}" (–¥–æ–≤–∂–∏–Ω–∞: ${formData.description.trim().length})`,
      price: formData.price,
      categoryId: formData.categoryId,
      countryId: formData.countryId,
      locationName: formData.locationName,
      latitude: formData.latitude,
      longitude: formData.longitude,
      images: `${formData.images.length} –∑–æ–±—Ä–∞–∂–µ–Ω—å`
    });

    const newErrors: FormErrors = {};

    if (!formData.title.trim()) newErrors.title = "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è";
    if (!formData.brandId) newErrors.brandId = "–í–∏–±–µ—Ä—ñ—Ç—å –º–∞—Ä–∫—É —Ç–µ—Ö–Ω—ñ–∫–∏";
    
    if (!formData.description.trim()) {
      newErrors.description = "–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è";
    } else if (formData.description.trim().length < MIN_DESCRIPTION_LENGTH) {
      newErrors.description = `–û–ø–∏—Å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ —â–æ–Ω–∞–π–º–µ–Ω—à–µ ${MIN_DESCRIPTION_LENGTH} —Å–∏–º–≤–æ–ª—ñ–≤`;
    }
    
    if (!formData.price.trim()) {
      newErrors.price = "–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É";
    } else {
      const cleanPrice = formData.price.replace(/\s/g, ''); // –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–æ–±—ñ–ª–∏ –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
      if (!/^\d+$/.test(cleanPrice)) {
        newErrors.price = "–¶—ñ–Ω–∞ –ø–æ–≤–∏–Ω–Ω–∞ –º—ñ—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏";
      } else if (parseFloat(cleanPrice) <= 0) {
        newErrors.price = "–¶—ñ–Ω–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–µ –Ω—É–ª—è";
      } else if (parseFloat(cleanPrice) > 999999999) {
        newErrors.price = "–¶—ñ–Ω–∞ –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∞ (–º–∞–∫—Å–∏–º—É–º 999,999,999)";
      }
    }
    
    if (!formData.categoryId) newErrors.categoryId = "–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é";
    if (!formData.countryId) newErrors.countryId = "–í–∏–±–µ—Ä—ñ—Ç—å –∫—Ä–∞—ó–Ω—É";
    if (!formData.locationName.trim()) newErrors.locationName = "–í–≤–µ–¥—ñ—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç";
    
    if (formData.latitude === null || formData.longitude === null) {
      newErrors.latitude = "–í–∫–∞–∂—ñ—Ç—å –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –Ω–∞ –∫–∞—Ä—Ç—ñ";
    }
    
    if (formData.images.length === 0) {
      newErrors.images = "–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ö–æ—á–∞ –± –æ–¥–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è";
    }

    console.log("‚ùå –ü–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó:", newErrors);
    setErrors(newErrors);
    const isValid = Object.keys(newErrors).length === 0;
    console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó: ${isValid ? '–ü–†–û–ô–®–õ–ê' : '–ù–ï –ü–†–û–ô–®–õ–ê'}`);
    return isValid;
  };

  // Form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!validateForm()) return;
    setIsUploading(true);

    try {
      console.log("üì§ –ü–æ—á–∞—Ç–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è");
      console.log("üìä –î–∞–Ω—ñ —Ñ–æ—Ä–º–∏:", formData);
      
      // –î–µ—Ç–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø–æ–ª—ñ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ backend schema
      console.log("üîç –î–ï–¢–ê–õ–¨–ù–ê –í–ê–õ–Ü–î–ê–¶–Ü–Ø –î–ê–ù–ò–•:");
      
      if (!formData.title?.trim()) {
        alert("–ó–∞–≥–æ–ª–æ–≤–æ–∫ —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º");
        return;
      }
      console.log("‚úÖ Title OK:", formData.title);
      
      if (!formData.description?.trim()) {
        alert("–û–ø–∏—Å —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º");
        return;
      }
      console.log("‚úÖ Description OK:", `${formData.description.length} —Å–∏–º–≤–æ–ª—ñ–≤`);
      
      if (!formData.price?.trim()) {
        alert("–¶—ñ–Ω–∞ —î –æ–±–æ–≤'—è–∑–∫–æ–≤–æ—é");
        return;
      }
      const numericPrice = parseFloat(formData.price.replace(/\s/g, ''));
      if (isNaN(numericPrice) || numericPrice <= 0) {
        alert("–¶—ñ–Ω–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —á–∏—Å–ª–æ–º –±—ñ–ª—å—à–µ –Ω—É–ª—è");
        return;
      }
      console.log("‚úÖ Price OK:", numericPrice);
      
      if (!formData.brandId) {
        alert("–í–∏–±–µ—Ä—ñ—Ç—å –±—Ä–µ–Ω–¥");
        return;
      }
      const numericBrandId = parseInt(formData.brandId);
      if (isNaN(numericBrandId)) {
        alert("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –±—Ä–µ–Ω–¥—É");
        return;
      }
      console.log("‚úÖ BrandId OK:", numericBrandId);
      
      if (!formData.categoryId) {
        alert("–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é");
        return;
      }
      const numericCategoryId = parseInt(formData.categoryId);
      if (isNaN(numericCategoryId)) {
        alert("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó");
        return;
      }
      console.log("‚úÖ CategoryId OK:", numericCategoryId);
      
      if (!formData.categoryName?.trim()) {
        alert("–î–∞–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–æ—à–∫–æ–¥–∂–µ–Ω—ñ. –í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —â–µ —Ä–∞–∑.");
        return;
      }
      console.log("‚úÖ Category name OK:", formData.categoryName);
      
      // Backend schema –ø–æ—Ç—Ä–µ–±—É—î settlement –º—ñ–Ω. 2 —Å–∏–º–≤–æ–ª–∏
      if (!formData.locationName?.trim()) {
        alert("–í–∫–∞–∂—ñ—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç");
        return;
      }
      
      if (formData.locationName.trim().length < 2) {
        alert("–ù–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 2 —Å–∏–º–≤–æ–ª–∏ (backend –≤–∏–º–æ–≥–∞)");
        return;
      }
      console.log("‚úÖ Settlement OK:", `"${formData.locationName.trim()}" (${formData.locationName.trim().length} —Å–∏–º–≤–æ–ª—ñ–≤)`);
      
      if (!formData.countryId) {
        alert("–í–∏–±–µ—Ä—ñ—Ç—å –∫—Ä–∞—ó–Ω—É");
        return;
      }
      const numericCountryId = parseInt(formData.countryId);
      if (isNaN(numericCountryId)) {
        alert("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –∫—Ä–∞—ó–Ω–∏");
        return;
      }
      console.log("‚úÖ CountryId OK:", numericCountryId);
      
      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
      if (formData.latitude === null || formData.longitude === null) {
        alert("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ");
        return;
      }
      if (isNaN(formData.latitude) || isNaN(formData.longitude)) {
        alert("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏");
        return;
      }
      console.log("‚úÖ Coordinates OK:", { lat: formData.latitude, lng: formData.longitude });
      
      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–º–æ–≤–∏ (backend –æ—á—ñ–∫—É—î lowercase)
      const validConditions = ['new', 'used'];
      const conditionLower = formData.condition.toLowerCase();
      if (!validConditions.includes(conditionLower)) {
        alert("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Å—Ç–∞–Ω —Ç–µ—Ö–Ω—ñ–∫–∏");
        return;
      }
      console.log("‚úÖ Condition OK:", conditionLower);
      
      const formDataToSubmit = new FormData();

      // –í–ê–ñ–õ–ò–í–û: –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –¥–æ backend schema
      console.log("üì¶ –§–û–†–ú–£–í–ê–ù–ù–Ø FORMDATA –í–Ü–î–ü–û–í–Ü–î–ù–û –î–û BACKEND SCHEMA:");

      // Basic info - –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç–æ—á–Ω–æ —è–∫ –æ—á—ñ–∫—É—î backend
      formDataToSubmit.append("title", formData.title.trim());
      formDataToSubmit.append("description", formData.description.trim());
      
      // –¶—ñ–Ω–∞: backend –æ—á—ñ–∫—É—î number, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —è–∫ string (FormData –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç—É—î)
      const cleanPrice = formData.price.replace(/\s/g, '');
      formDataToSubmit.append("price", cleanPrice);
      console.log("üí∞ Price formatted:", cleanPrice);
      
      formDataToSubmit.append("currency", formData.currency);
      formDataToSubmit.append("category", formData.categoryName.trim());
      
      // CategoryId: backend –æ—á—ñ–∫—É—î number
      formDataToSubmit.append("categoryId", formData.categoryId);
      console.log("üè∑Ô∏è CategoryId:", formData.categoryId, "type:", typeof formData.categoryId);

      // Condition: backend –æ—á—ñ–∫—É—î lowercase enum ['new', 'used']
      const conditionValue = formData.condition.toLowerCase();
      formDataToSubmit.append("condition", conditionValue);
      console.log("ÔøΩ Condition:", conditionValue);
      
      // BrandId: backend –æ—á—ñ–∫—É—î number
      formDataToSubmit.append("brandId", formData.brandId);
      console.log("üöó BrandId:", formData.brandId, "type:", typeof formData.brandId);

      // Location data - —Ñ–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ locationInputSchema
      const locationData = {
        // countryId: backend –æ—á—ñ–∫—É—î number, –∞–ª–µ –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ
        countryId: parseInt(formData.countryId),
        // settlement: –æ–±–æ–≤'—è–∑–∫–æ–≤–æ, –º—ñ–Ω. 2 —Å–∏–º–≤–æ–ª–∏
        settlement: formData.locationName.trim(),
        // regionId: –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ, —è–∫—â–æ —î
        ...(formData.regionId && formData.regionId !== "" ? { regionId: parseInt(formData.regionId) } : {}),
        // communityId: –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ, —è–∫—â–æ —î
        ...(formData.communityId && formData.communityId !== "" ? { communityId: parseInt(formData.communityId) } : {}),
        // coordinates: backend –æ—á—ñ–∫—É—î number
        latitude: parseFloat(String(formData.latitude)),
        longitude: parseFloat(String(formData.longitude))
      };
      
      console.log("üìç Location data object:", JSON.stringify(locationData, null, 2));
      console.log("üîç Settlement length check:", locationData.settlement?.length || 0);
      console.log("üîç Settlement value:", `"${locationData.settlement}"`);
      
      // –í–∞–ª—ñ–¥—É—î–º–æ locationData –ø–µ—Ä–µ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é
      if (isNaN(locationData.countryId)) {
        alert("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –∫—Ä–∞—ó–Ω–∏");
        return;
      }
      if (!locationData.settlement || locationData.settlement.length < 2) {
        alert(`–ù–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 2 —Å–∏–º–≤–æ–ª–∏. –ü–æ—Ç–æ—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è: "${locationData.settlement}" (–¥–æ–≤–∂–∏–Ω–∞: ${locationData.settlement?.length || 0})`);
        return;
      }
      if (isNaN(locationData.latitude) || isNaN(locationData.longitude)) {
        alert("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏");
        return;
      }
      
      formDataToSubmit.append("location", JSON.stringify(locationData));

      // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ —Ç–∞–∫–æ–∂ –æ–∫—Ä–µ–º–æ (—è–∫—â–æ backend —ó—Ö –æ—á—ñ–∫—É—î –æ–∫—Ä–µ–º–æ)
      formDataToSubmit.append("latitude", String(locationData.latitude));
      formDataToSubmit.append("longitude", String(locationData.longitude));
      
      // CountryId –æ–∫—Ä–µ–º–æ (–¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ)
      formDataToSubmit.append("countryId", String(locationData.countryId));

      formDataToSubmit.append("priceType", formData.priceType);
      formDataToSubmit.append("vatIncluded", String(formData.vatIncluded));

      // Motorized specs
      if (isMotorized) {
        const hasFilledValues = Object.values(motorizedSpec).some(value => {
          if (value === null || value === undefined) return false;
          if (typeof value === "string" && value.trim() === "") return false;
          return true;
        });

        if (hasFilledValues) {
          // –í–ê–ñ–õ–ò–í–û: –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ enum –∑–Ω–∞—á–µ–Ω–Ω—è —É –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è backend
          const convertedMotorizedSpec = { ...motorizedSpec };
          
          console.log("üîß BEFORE conversion - motorizedSpec:", JSON.stringify(motorizedSpec, null, 2));
          
          // Backend –æ—á—ñ–∫—É—î transmission —É –í–ï–†–•–ù–¨–û–ú–£ –†–ï–ì–Ü–°–¢–†–Ü: 'MANUAL' | 'AUTOMATIC' | 'HYDROSTATIC' | 'CVT'
          if (convertedMotorizedSpec.transmission && typeof convertedMotorizedSpec.transmission === 'string' && convertedMotorizedSpec.transmission.trim() !== "") {
            const originalTransmission = convertedMotorizedSpec.transmission;
            const upperTransmission = convertedMotorizedSpec.transmission.toUpperCase();
            console.log("üîß Transmission converted:", `"${originalTransmission}" ‚Üí "${upperTransmission}"`);
            
            // –í–∞–ª—ñ–¥—É—î–º–æ —â–æ –∑–Ω–∞—á–µ–Ω–Ω—è —î –≤–∞–ª—ñ–¥–Ω–∏–º enum
            const validTransmissions = ['MANUAL', 'AUTOMATIC', 'HYDROSTATIC', 'CVT'] as const;
            if (!validTransmissions.includes(upperTransmission as any)) {
              alert(`–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ç–∏–ø —Ç—Ä–∞–Ω—Å–º—ñ—Å—ñ—ó: "${originalTransmission}". –î–æ–ø—É—Å—Ç–∏–º—ñ –∑–Ω–∞—á–µ–Ω–Ω—è: ${validTransmissions.join(', ')}`);
              return;
            }
            
            convertedMotorizedSpec.transmission = upperTransmission as typeof convertedMotorizedSpec.transmission;
          }
          
          // Backend –æ—á—ñ–∫—É—î fuelType —É –í–ï–†–•–ù–¨–û–ú–£ –†–ï–ì–Ü–°–¢–†–Ü: 'DIESEL' | 'GASOLINE' | 'ELECTRIC' | 'HYBRID' | 'GAS'
          if (convertedMotorizedSpec.fuelType && typeof convertedMotorizedSpec.fuelType === 'string') {
            const originalFuelType = convertedMotorizedSpec.fuelType;
            convertedMotorizedSpec.fuelType = convertedMotorizedSpec.fuelType.toUpperCase() as typeof convertedMotorizedSpec.fuelType;
            console.log("üîß FuelType converted:", `"${originalFuelType}" ‚Üí "${convertedMotorizedSpec.fuelType}"`);
          }
          
          console.log("üîß AFTER conversion - motorizedSpec:", JSON.stringify(convertedMotorizedSpec, null, 2));
          
          formDataToSubmit.append("motorizedSpec", JSON.stringify(convertedMotorizedSpec));
        }
      }

      // Images
      formData.images.forEach((file, index) => {
        formDataToSubmit.append("images", file);
        console.log(`üñºÔ∏è –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è ${index + 1}:`, file.name, `(${(file.size / 1024 / 1024).toFixed(2)}MB)`);
      });

      // –õ–æ–≥—É—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ, —è–∫—ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—é—Ç—å—Å—è
      console.log("üìã –§–Ü–ù–ê–õ–¨–ù–ò–ô FORMDATA –î–õ–Ø –í–Ü–î–ü–†–ê–í–ö–ò:");
      console.log("üìä –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–ª—ñ–≤:", Array.from(formDataToSubmit.keys()).length);
      
      for (const [key, value] of formDataToSubmit.entries()) {
        if (value instanceof File) {
          console.log(`  üìé ${key}:`, `File(${value.name}, ${(value.size / 1024 / 1024).toFixed(2)}MB, ${value.type})`);
        } else {
          console.log(`  üìù ${key}:`, `"${value}" (length: ${String(value).length})`);
        }
      }

      console.log("ÔøΩ –í–Ü–î–ü–†–ê–í–õ–Ø–Ñ–ú–û –ó–ê–ü–ò–¢ –ù–ê –°–¢–í–û–†–ï–ù–ù–Ø –û–ì–û–õ–û–®–ï–ù–ù–Ø...");
      console.log("ÔøΩ Backend endpoint: POST /listings");
      console.log("‚ö†Ô∏è  –£–í–ê–ì–ê: –ó–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–º –∞–Ω–∞–ª—ñ–∑–æ–º, backend route –º–æ–∂–µ –Ω–µ –º–∞—Ç–∏ validation middleware!");
      
      const resultAction = await dispatch(createListing(formDataToSubmit));

      console.log("üì® –†–ï–ó–£–õ–¨–¢–ê–¢ –í–Ü–î–ü–û–í–Ü–î–Ü:", resultAction);
      console.log("üìä Type:", resultAction.type);
      console.log("üìä Meta:", resultAction.meta);

      if (createListing.fulfilled.match(resultAction)) {
        console.log("‚úÖ –û–ì–û–õ–û–®–ï–ù–ù–Ø –£–°–ü–Ü–®–ù–û –°–¢–í–û–†–ï–ù–û:", resultAction.payload);
        navigate(`/listings/${resultAction.payload.id}`);
      } else {
        console.error("‚ùå –ü–û–ú–ò–õ–ö–ê –°–¢–í–û–†–ï–ù–ù–Ø –û–ì–û–õ–û–®–ï–ù–ù–Ø");
        console.error("‚ùå Error object:", resultAction.error);
        console.error("‚ùå Error payload:", resultAction.payload);
        
        // –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –ø–æ–º–∏–ª–∫–∏
        let detailedError = "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞";
        let statusCode: string | number = "–Ω–µ–≤—ñ–¥–æ–º–∏–π";
        let backendMessage = "";
        
        if (resultAction.payload && typeof resultAction.payload === 'object') {
          const payload = resultAction.payload as Record<string, unknown>;
          
          console.log("üîç –ê–ù–ê–õ–Ü–ó PAYLOAD –ü–û–ú–ò–õ–ö–ò:");
          console.log("  Status:", payload.status);
          console.log("  Data:", payload.data);
          console.log("  Message:", payload.message);
          
          statusCode = (payload.status as string | number) || "–Ω–µ–≤—ñ–¥–æ–º–∏–π";
          
          if (payload.data) {
            if (typeof payload.data === 'object') {
              const data = payload.data as Record<string, unknown>;
              console.log(payload.data);
              backendMessage = (data.message as string) || JSON.stringify(payload.data);
              
              // –°–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –¥–ª—è 400 Bad Request
              if (payload.status === 400) {
                console.error("üö® 400 BAD REQUEST - –ê–ù–ê–õ–Ü–ó:");
                console.error("  –ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:");
                console.error("  1. –í—ñ–¥—Å—É—Ç–Ω—ñ–π validation middleware –Ω–∞ backend");
                console.error("  2. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö");
                console.error("  3. –û–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è –≤—ñ–¥—Å—É—Ç–Ω—ñ");
                console.error("  4. –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ —Ç–∏–ø–∏ –¥–∞–Ω–∏—Ö");
                
                if (data.errors) {
                  console.error("  Validation errors:", data.errors);
                  detailedError = `–ü–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó: ${JSON.stringify(data.errors, null, 2)}`;
                } else if (data.message) {
                  detailedError = data.message as string;
                } else {
                  detailedError = `400 Bad Request: ${JSON.stringify(payload.data, null, 2)}`;
                }
              } else {
                detailedError = backendMessage;
              }
            } else {
              detailedError = String(payload.data);
            }
          } else if (payload.message) {
            detailedError = payload.message as string;
          }
        }
        
        console.error("‚ùå –î–ï–¢–ê–õ–¨–ù–ê –ü–û–ú–ò–õ–ö–ê:", detailedError);
        console.error("‚ùå STATUS CODE:", statusCode);
        
        const errorMessage = handleApiError(resultAction.error);
        
        // –ü–æ–∫—Ä–∞—â–µ–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        let userMessage = `–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è (${statusCode})`;
        
        if (statusCode === 400) {
          userMessage += "\n\nüö® –ú–æ–∂–ª–∏–≤–∞ –ø—Ä–∏—á–∏–Ω–∞: –ø—Ä–æ–±–ª–µ–º–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ";
          userMessage += "\nüí° –°–ø—Ä–æ–±—É–π—Ç–µ:";
          userMessage += "\n  ‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤—Å—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è";
          userMessage += "\n  ‚Ä¢ –í–∏–±—Ä–∞—Ç–∏ –Ω–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç —â–µ —Ä–∞–∑";
          userMessage += "\n  ‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç—ñ";
        }
        
        userMessage += `\n\n–¢–µ—Ö–Ω—ñ—á–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è: ${errorMessage} - ${detailedError}`;
        
        alert(userMessage);
      }
    } catch (error) {
      const errorMessage = handleApiError(error);
      alert(`–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è: ${errorMessage}`);
    } finally {
      setIsUploading(false);
    }
  };

  const handleUseMyLocationToggle = (checked: boolean) => {
    setFormData((prev) => {
      if (checked && 
          geolocation.state.userLatitude != null && 
          geolocation.state.userLongitude != null) {
        return {
          ...prev,
          useMyLocation: true,
          latitude: geolocation.state.userLatitude,
          longitude: geolocation.state.userLongitude,
        };
      }
      return {
        ...prev,
        useMyLocation: false,
      };
    });
  };

  const requestGeolocation = () => {
    geolocation.requestLocation();
  };

  const selectedCategoryObj = categories.find(
    (cat) => cat.id === Number(formData.categoryId)
  );
  const isMotorized = selectedCategoryObj?.isMotorized ?? false;

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-2xl font-bold text-gray-900 mb-6">
        –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
      </h1>

      {countriesError && (
        <div className="bg-red-50 border-l-4 border-red-500 p-4 mb-6">
          <div className="flex">
            <div className="flex-shrink-0">
              <svg className="h-5 w-5 text-red-500" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
              </svg>
            </div>
            <div className="ml-3">
              <p className="text-sm text-red-700">{countriesError}</p>
            </div>
          </div>
        </div>
      )}

      {mapError && (
        <div className="bg-yellow-50 border-l-4 border-yellow-500 p-4 mb-6">
          <div className="flex">
            <div className="flex-shrink-0">
              <svg className="h-5 w-5 text-yellow-500" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
              </svg>
            </div>
            <div className="ml-3">
              <p className="text-sm text-yellow-700">{mapError}</p>
            </div>
          </div>
        </div>
      )}

      <form onSubmit={handleSubmit} autoComplete="off">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {/* Left column */}
          <div className="space-y-6">
            {/* Title */}
            <div>
              <label htmlFor="title" className="block text-sm font-medium text-gray-700 mb-1">
                –ù–∞–∑–≤–∞ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è *
              </label>
              <input
                type="text"
                id="title"
                name="title"
                value={formData.title}
                onChange={handleInputChange}
                placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –¢—Ä–∞–∫—Ç–æ—Ä John Deere 6155M, 2020"
                className={`w-full px-4 py-2 border ${
                  errors.title ? "border-red-500" : "border-gray-300"
                } rounded-md focus:outline-none focus:ring-1 focus:ring-green-500 focus:border-green-500`}
                aria-invalid={!!errors.title}
                aria-describedby={errors.title ? "title-error" : undefined}
              />
              {errors.title && (
                <p id="title-error" className="mt-1 text-sm text-red-500">
                  {errors.title}
                </p>
              )}
            </div>

            {/* Brand */}
            <BrandSelector
              value={formData.brandId}
              onChange={handleBrandSelect}
              error={errors.brandId || ""}
            />

            {/* Description */}
            <div>
              <label htmlFor="description" className="block text-sm font-medium text-gray-700 mb-1">
                –û–ø–∏—Å *
              </label>
              <textarea
                id="description"
                name="description"
                value={formData.description}
                onChange={handleInputChange}
                placeholder="–î–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É, —Ç–µ—Ö–Ω—ñ—á–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, —Å—Ç–∞–Ω, –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü—ñ—è —Ç–æ—â–æ"
                rows={8}
                className={`w-full px-4 py-2 border ${
                  errors.description ? "border-red-500" : "border-gray-300"
                } rounded-md focus:outline-none focus:ring-1 focus:ring-green-500 focus:border-green-500`}
                aria-invalid={!!errors.description}
                aria-describedby={errors.description ? "description-error" : undefined}
              />
              <p className="mt-1 text-xs text-gray-500">
                –ú—ñ–Ω—ñ–º—É–º {MIN_DESCRIPTION_LENGTH} —Å–∏–º–≤–æ–ª—ñ–≤
              </p>
              {errors.description && (
                <p id="description-error" className="mt-1 text-sm text-red-500">
                  {errors.description}
                </p>
              )}
            </div>

            {/* Price */}
            <PriceInput
              price={formData.price}
              currency={formData.currency}
              priceType={formData.priceType}
              vatIncluded={formData.vatIncluded}
              onChange={handleInputChange}
              error={errors.price || ""}
            />
          </div>

          {/* Right column */}
          <div className="space-y-6">
            {/* Category */}
            <CategorySelector
              value={formData.categoryId}
              onChange={handleInputChange}
              error={errors.categoryId || ""}
            />

            {/* Condition */}
            <div>
              <label htmlFor="condition" className="block text-sm font-medium text-gray-700 mb-1">
                –°—Ç–∞–Ω —Ç–µ—Ö–Ω—ñ–∫–∏ *
              </label>
              <div className="relative">
                <select
                  id="condition"
                  name="condition"
                  value={formData.condition}
                  onChange={handleInputChange}
                  className="appearance-none w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-green-500 focus:border-green-500"
                >
                  <option value="NEW">–ù–æ–≤–∞</option>
                  <option value="USED">–í–∂–∏–≤–∞–Ω–∞</option>
                </select>
              </div>
            </div>

            {/* Location */}
            <div className="space-y-4">
              <h3 className="text-lg font-medium text-gray-900">–ú—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É</h3>
              
              <GeolocationTester onLocationReceived={(lat, lng) => {
                handleReverseGeocode(lat, lng, true);
              }} />
              
              {geocodingStatus.isLoading && (
                <div className="p-3 bg-yellow-50 border border-yellow-200 rounded-md">
                  <div className="flex items-center">
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-yellow-600 mr-2"></div>
                    <span className="text-sm text-yellow-800">–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–¥—Ä–µ—Å–∏ –∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç...</span>
                  </div>
                </div>
              )}
              
              {geocodingStatus.lastAttempt && !geocodingStatus.isLoading && (
                <div className={`p-3 rounded-md ${
                  geocodingStatus.success 
                    ? 'bg-green-50 border border-green-200' 
                    : 'bg-red-50 border border-red-200'
                }`}>
                  <div className="flex items-center">
                    {geocodingStatus.success ? (
                      <svg className="w-4 h-4 text-green-600 mr-2" fill="currentColor" viewBox="0 0 20 20">
                        <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                      </svg>
                    ) : (
                      <svg className="w-4 h-4 text-red-600 mr-2" fill="currentColor" viewBox="0 0 20 20">
                        <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                      </svg>
                    )}
                    <span className={`text-sm ${
                      geocodingStatus.success ? 'text-green-800' : 'text-red-800'
                    }`}>
                      {geocodingStatus.success 
                        ? `–ê–¥—Ä–µ—Å–∞ —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–∞ (${geocodingStatus.lastAttempt})`
                        : `–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–¥—Ä–µ—Å—É (${geocodingStatus.lastAttempt}). –í–∏ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω—ñ –≤—Ä—É—á–Ω—É.`
                      }
                    </span>
                  </div>
                </div>
              )}
              
              <GeolocationDebugPanel
                formData={{
                  useMyLocation: formData.useMyLocation,
                  userLatitude: geolocation.state.userLatitude,
                  userLongitude: geolocation.state.userLongitude,
                  latitude: formData.latitude ?? undefined,
                  longitude: formData.longitude ?? undefined,
                  countryId: formData.countryId,
                  regionId: formData.regionId,
                  locationName: formData.locationName,
                }}
                countries={countries}
                onLocationChange={handleLocationChange}
                onForceGeocodeUpdate={(lat, lng) => handleReverseGeocode(lat, lng, true)}
                processGeocodeAddress={processGeocodeAddress}
              />
              
              <CoordinatesDisplay
                useMyLocation={formData.useMyLocation}
                userLatitude={geolocation.state.userLatitude}
                userLongitude={geolocation.state.userLongitude}
                productLatitude={formData.latitude ?? undefined}
                productLongitude={formData.longitude ?? undefined}
                isLoadingLocation={geolocation.state.loading}
                onUseMyLocationToggle={handleUseMyLocationToggle}
                onRequestGeolocation={requestGeolocation}
              />
            </div>

            {/* Location selector */}
            <LocationSelector
              countries={countries}
              data={{
                countryId: formData.countryId,
                regionId: formData.regionId,
                communityId: formData.communityId,
                locationName: formData.locationName,
                latitude: formData.latitude || 0,
                longitude: formData.longitude || 0,
              }}
              errors={{
                countryId: errors.countryId || "",
                regionId: errors.regionId || "",
                communityId: errors.communityId || "",
                locationName: errors.locationName || "",
                latitude: errors.latitude || "",
              }}
              onChange={handleLocationChange}
              onMapClick={handleMapCoordinatesChange}
              mapLoaded={mapLoaded}
              useCountryCoordinates={true}
            />

            {/* Auto-filled fields indicator */}
            {(autoFilledFields.countryId || autoFilledFields.locationName || autoFilledFields.regionId) && (
              <div className="text-sm text-blue-600 bg-blue-50 p-3 rounded-md">
                <div className="flex items-center">
                  <svg className="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                  </svg>
                  <span className="font-medium">–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–ø–æ–≤–Ω–µ–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó:</span>
                </div>
                <ul className="mt-1 ml-6 text-xs">
                  {autoFilledFields.countryId && <li>‚Ä¢ –ö—Ä–∞—ó–Ω–∞</li>}
                  {autoFilledFields.regionId && <li>‚Ä¢ –†–µ–≥—ñ–æ–Ω/–û–±–ª–∞—Å—Ç—å</li>}
                  {autoFilledFields.locationName && <li>‚Ä¢ –ù–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç</li>}
                </ul>
                <p className="mt-2 text-xs text-gray-600">
                  –í–∏ –º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —Ü—ñ –¥–∞–Ω—ñ –≤—Ä—É—á–Ω—É, —è–∫—â–æ –≤–æ–Ω–∏ –Ω–µ—Ç–æ—á–Ω—ñ.
                </p>
              </div>
            )}

            {/* Image uploader */}
            <ImageUploader
              images={formData.images}
              onChange={handleImagesChange}
              onRemove={handleRemoveImage}
              error={errors.images || ""}
            />
          </div>
        </div>

        {/* Motorized specs */}
        <MotorizedSpecFormComponent
          isMotorized={isMotorized}
          motorizedSpec={motorizedSpec}
          onChange={handleMotorizedSpecChange}
        />

        {/* Form actions */}
        <div className="mt-8 flex items-center justify-end space-x-4">
          <button
            type="button"
            onClick={() => navigate(-1)}
            className="px-6 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 transition-colors"
          >
            –°–∫–∞—Å—É–≤–∞—Ç–∏
          </button>
          <button
            type="submit"
            disabled={isLoading || isUploading}
            className="px-6 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors disabled:opacity-70 disabled:cursor-not-allowed"
          >
            {isLoading || isUploading
              ? "–ü—É–±–ª—ñ–∫–∞—Ü—ñ—è..."
              : "–û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è"}
          </button>
        </div>
      </form>
    </div>
  );
};

export default CreateListingPage;

// import React, { useState, useEffect, useCallback } from "react";
// import { useNavigate } from "react-router-dom";
// import { useAppDispatch, useAppSelector } from "../store";
// import { fetchCategories } from "../store/catalogSlice";
// import { fetchBrands } from "../store/brandSlice";
// import { createListing } from "../store/listingSlice";
// // import { fetchRegions } from "../store/locationSlice"; // –¢–ò–ú–ß–ê–°–û–í–û –í–ò–ú–ö–ù–ï–ù–û
// import { countriesAPI } from "../api/apiClient";
// import { useGeolocation, useReverseGeocode } from "../hooks/useGeolocation";
// import { handleApiError } from "../utils/errorHandler";
// import MotorizedSpecFormComponent, {
//   initialMotorizedSpec,
//   MotorizedSpecForm as MotorizedSpecFormType,
// } from "../components/ui/MotorizedSpecForm";
// import CategorySelector from "../components/ui/CategorySelector";
// import BrandSelector from "../components/ui/BrandSelector";
// import PriceInput from "../components/ui/PriceInput";
// import ImageUploader from "../components/ui/ImageUploader";
// import LocationSelector from "../components/ui/LocationSelector";
// import GeolocationDebugPanel from "../components/ui/GeolocationDebugPanel";
// import CoordinatesDisplay from "../components/ui/CoordinatesDisplay";
// import GeolocationTester from "../components/ui/GeolocationTester";

// // Add Leaflet to the Window type for TypeScript
// declare global {
//   interface Window {
//     L: typeof import("leaflet");
//   }
// }

// interface FormData {
//   title: string;
//   description: string;
//   price: string;
//   currency: "UAH" | "USD" | "EUR";
//   categoryId: string;
//   categoryName: string;
//   countryId: string;
//   regionId: string;
//   communityId: string;
//   locationId: string;
//   locationName: string;
//   latitude: number | undefined;
//   longitude: number | undefined;
//   images: File[];
//   condition: "NEW" | "USED";
//   brandId: string;
//   brandName: string;
//   priceType: "NETTO" | "BRUTTO";
//   vatIncluded: boolean;
//   // –ù–æ–≤—ñ –ø–æ–ª—è –¥–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó
//   useMyLocation: boolean; // —á–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –º—ñ—Å—Ü–µ –∞–≤—Ç–æ—Ä–∞
//   userLatitude: number | null; // –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∞–≤—Ç–æ—Ä–∞
//   userLongitude: number | null;
// }

// interface FormErrors {
//   title?: string;
//   description?: string;
//   price?: string;
//   categoryId?: string;
//   countryId?: string;
//   regionId?: string;
//   communityId?: string;
//   locationId?: string;
//   locationName?: string;
//   images?: string | undefined;
//   brandId?: string | undefined;
//   latitude?: string;
//   longitude?: string;
// }

// const CreateListingPage = () => {
//   const dispatch = useAppDispatch();
//   const navigate = useNavigate();
//   const { categories } = useAppSelector((state) => state.catalog);
//   const { isLoading } = useAppSelector((state) => state.listing);
  
//   // –ö–∞—Å—Ç–æ–º–Ω—ñ —Ö—É–∫–∏ –¥–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó
//   const geolocation = useGeolocation();
//   const { geocodeCoordinates } = useReverseGeocode();

//   const [countries, setCountries] = useState<
//     {
//       id: number;
//       name: string;
//       code: string;
//       latitude?: number;
//       longitude?: number;
//     }[]
//   >([]);

//   // –°—Ç–∞–Ω –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–ø–æ–≤–Ω–µ–Ω–∏—Ö –ø–æ–ª—ñ–≤
//   const [autoFilledFields, setAutoFilledFields] = useState<{
//     countryId?: boolean;
//     locationName?: boolean;
//   }>({});

//   const [formData, setFormData] = useState<FormData>({
//     title: "",
//     description: "",
//     price: "",
//     currency: "UAH",
//     categoryId: "",
//     categoryName: "",
//     countryId: "",
//     regionId: "",
//     communityId: "",
//     locationId: "",
//     locationName: "",
//     latitude: undefined,
//     longitude: undefined,
//     images: [],
//     condition: "USED",
//     brandId: "",
//     brandName: "",
//     priceType: "NETTO",
//     vatIncluded: false,
//     useMyLocation: true,
//     userLatitude: null,
//     userLongitude: null,
//   });

//   const [motorizedSpec, setMotorizedSpec] =
//     useState<MotorizedSpecFormType>(initialMotorizedSpec);

//   const [errors, setErrors] = useState<FormErrors>({});
//   const [isUploading, setIsUploading] = useState(false);
//   const [mapLoaded, setMapLoaded] = useState(false);
//   const [geocodingStatus, setGeocodingStatus] = useState<{
//     isLoading: boolean;
//     lastAttempt?: string;
//     success: boolean;
//   }>({
//     isLoading: false,
//     success: false
//   });

//   useEffect(() => {
//     if (categories.length === 0) dispatch(fetchCategories());
//     if (!countries.length) {
//       dispatch(fetchBrands());
//       countriesAPI.getAll().then((res) => {
//         setCountries(res.data.data || []);
//       });
//     }
//   }, [dispatch, categories.length, countries.length]);

//   // –¢–ò–ú–ß–ê–°–û–í–û –í–ò–ú–ö–ù–ï–ù–û: –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ–≥—ñ–æ–Ω—ñ–≤
//   // useEffect(() => {
//   //   if (formData.countryId) {
//   //     dispatch(fetchRegions(formData.countryId));
//   //   }
//   // }, [dispatch, formData.countryId]);

//   // –î–∏–Ω–∞–º—ñ—á–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è Leaflet
//   useEffect(() => {
//     if (!mapLoaded && typeof window !== "undefined") {
//       const leafletCss = document.createElement("link");
//       leafletCss.rel = "stylesheet";
//       leafletCss.href = "https://unpkg.com/leaflet/dist/leaflet.css";
//       document.head.appendChild(leafletCss);

//       const leafletScript = document.createElement("script");
//       leafletScript.src = "https://unpkg.com/leaflet/dist/leaflet.js";
//       leafletScript.async = true;
//       leafletScript.onload = () => setMapLoaded(true);
//       document.body.appendChild(leafletScript);
//     }
//   }, [mapLoaded]);

//   const selectedCategoryObj = categories.find(
//     (cat) => cat.id === Number(formData.categoryId)
//   );
//   const isMotorized = selectedCategoryObj?.isMotorized ?? false;

//   // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è
//   const handleReverseGeocode = useCallback(async (lat: number, lng: number, forceUpdate = false) => {
//     try {
//       console.log("üîÑ handleReverseGeocode –≤–∏–∫–ª–∏–∫–∞–Ω–∞:", { lat, lng, forceUpdate });
      
//       setGeocodingStatus({
//         isLoading: true,
//         lastAttempt: new Date().toLocaleTimeString(),
//         success: false
//       });
      
//       console.log("üìä –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω —Ñ–æ—Ä–º–∏:", {
//         countryId: formData.countryId,
//         locationName: formData.locationName,
//         hasCountry: !!(formData.countryId && formData.countryId !== ""),
//         hasLocationName: !!(formData.locationName && formData.locationName.trim() !== "")
//       });
      
//       // –Ø–∫—â–æ –Ω–µ —Ñ–æ—Ä—Å—É—î—Ç—å—Å—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ä–æ–±–∏—Ç–∏ –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è
//       if (!forceUpdate) {
//         // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω —Ñ–æ—Ä–º–∏
//         const hasCountry = formData.countryId && formData.countryId !== "";
//         const hasLocationName = formData.locationName && formData.locationName.trim() !== "";
        
//         // –Ø–∫—â–æ –æ–±–∏–¥–≤–∞ –ø–æ–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ, –Ω–µ —Ä–æ–±–∏–º–æ –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è
//         if (hasCountry && hasLocationName) {
//           console.log("‚ùå –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è - –≤—Å—ñ –ø–æ–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ:", {
//             countryId: formData.countryId,
//             locationName: formData.locationName
//           });
//           setGeocodingStatus({ isLoading: false, success: true });
//           return;
//         }
        
//         console.log("‚úÖ –î–æ–∑–≤–æ–ª—è—î–º–æ –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è - —î –ø–æ—Ä–æ–∂–Ω—ñ –ø–æ–ª—è:", {
//           needsCountry: !hasCountry,
//           needsLocationName: !hasLocationName
//         });
//       } else {
//         console.log("üöÄ –§–æ—Ä—Å–æ–≤–∞–Ω–µ –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è - —ñ–≥–Ω–æ—Ä—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω —Ñ–æ—Ä–º–∏");
//       }
      
//       console.log("üåê –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –¥–æ –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è API...");
//       const result = await geocodeCoordinates(lat, lng);
//       console.log("üìç –û—Ç—Ä–∏–º–∞–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è:", result);
      
//       const address = (result?.address || {}) as Record<string, string>;
      
//       const processedAddress = processGeocodeAddress(address, countries);
//       console.log("üè† –û–±—Ä–æ–±–ª–µ–Ω–∞ –∞–¥—Ä–µ—Å–∞:", processedAddress);
      
//       if (processedAddress) {
//         console.log("‚úÖ –ó–Ω–∞–π–¥–µ–Ω–∞ –∫—Ä–∞—ó–Ω–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è:", processedAddress.country);
        
//         setFormData(prev => {
//           // –û–Ω–æ–≤–ª—é—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–æ—Ä–æ–∂–Ω—ñ –ø–æ–ª—è, —è–∫—â–æ –Ω–µ —Ñ–æ—Ä—Å—É—î—Ç—å—Å—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
//           const updates: Partial<typeof prev> = {};
//           const fieldsUpdated: { countryId?: boolean; locationName?: boolean } = {};
          
//           console.log("üìù –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω —Ñ–æ—Ä–º–∏ –ø–µ—Ä–µ–¥ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º:", {
//             countryId: prev.countryId,
//             locationName: prev.locationName,
//             forceUpdate
//           });
          
//           // –ö—Ä–∞—ó–Ω–∞: –æ–Ω–æ–≤–ª—é—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –Ω–µ –≤–∏–±—Ä–∞–Ω–∞ –∞–±–æ —Ñ–æ—Ä—Å—É—î—Ç—å—Å—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
//           if ((!prev.countryId || prev.countryId === "") || forceUpdate) {
//             updates.countryId = String(processedAddress.country.id);
//             fieldsUpdated.countryId = true;
//             console.log("–û–Ω–æ–≤–ª—é—î–º–æ –∫—Ä–∞—ó–Ω—É:", updates.countryId);
//           } else {
//             console.log("–ö—Ä–∞—ó–Ω–∞ –≤–∂–µ –≤–∏–±—Ä–∞–Ω–∞, –Ω–µ –æ–Ω–æ–≤–ª—é—î–º–æ:", prev.countryId);
//           }
          
//           // –ù–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç: –æ–Ω–æ–≤–ª—é—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ —Ñ–æ—Ä—Å—É—î—Ç—å—Å—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
//           if ((!prev.locationName || prev.locationName.trim() === "") || forceUpdate) {
//             updates.locationName = processedAddress.locationName;
//             fieldsUpdated.locationName = true;
//             console.log("–û–Ω–æ–≤–ª—é—î–º–æ –Ω–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç:", updates.locationName);
//           } else {
//             console.log("–ù–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç –≤–∂–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–∏–π, –Ω–µ –æ–Ω–æ–≤–ª—é—î–º–æ:", prev.locationName);
//           }
          
//           console.log("–§—ñ–Ω–∞–ª—å–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó:", updates);
          
//           // –û–Ω–æ–≤–ª—é—î–º–æ autoFilledFields —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î –∑–º—ñ–Ω–∏
//           if (Object.keys(fieldsUpdated).length > 0) {
//             setAutoFilledFields(prevAutoFilled => ({
//               ...prevAutoFilled,
//               ...fieldsUpdated
//             }));
//           }
          
//           return {
//             ...prev,
//             ...updates
//           };
//         });
        
//         // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ä–µ–≥—ñ–æ–Ω–∏ –¥–ª—è –∑–Ω–∞–π–¥–µ–Ω–æ—ó –∫—Ä–∞—ó–Ω–∏ –æ–∫—Ä–µ–º–æ (–ø–æ–∑–∞ setFormData)
//         const countryId = String(processedAddress.country.id);
        
//         // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω —Ñ–æ—Ä–º—É–ª—è—Ä–∞
//         setFormData(currentFormData => {
//           if ((!currentFormData.countryId || currentFormData.countryId !== countryId) || forceUpdate) {
//             console.log("–ö—Ä–∞—ó–Ω–∞ –∑–Ω–∞–π–¥–µ–Ω–∞:", countryId);
//             console.log("–ü–æ—Ç–æ—á–Ω–∞ –∫—Ä–∞—ó–Ω–∞ –≤ —Ñ–æ—Ä–º—ñ:", currentFormData.countryId);
//             console.log("–ó–Ω–∞–π–¥–µ–Ω–∞ –∫—Ä–∞—ó–Ω–∞:", processedAddress.country);
            
//             // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –∫—Ä–∞—ó–Ω–∞ –≤ –Ω–∞—à–æ–º—É —Å–ø–∏—Å–∫—É
//             const countryExists = countries.find(c => c.id === processedAddress.country.id);
//             if (!countryExists) {
//               console.warn("–ö—Ä–∞—ó–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫—Ä–∞—ó–Ω:", processedAddress.country);
//               return currentFormData;
//             }
            
//             // –¢–ò–ú–ß–ê–°–û–í–û –í–ò–ú–ö–ù–ï–ù–û: –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ–≥—ñ–æ–Ω—ñ–≤ (API –µ–Ω–¥–ø–æ—ñ–Ω—Ç –Ω–µ —ñ—Å–Ω—É—î)
//             // dispatch(fetchRegions(countryId))
//             //   .unwrap()
//             //   .then(() => console.log("–†–µ–≥—ñ–æ–Ω–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ"))
//             //   .catch(error => {
//             //     console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ–≥—ñ–æ–Ω—ñ–≤:", handleApiError(error));
//             //     console.error("–î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏:", error);
//             //   });
            
//             console.log("‚ö†Ô∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ–≥—ñ–æ–Ω—ñ–≤ –≤–∏–º–∫–Ω–µ–Ω–æ - API –µ–Ω–¥–ø–æ—ñ–Ω—Ç –Ω–µ —ñ—Å–Ω—É—î");
//           }
//           return currentFormData; // –ù–µ –∑–º—ñ–Ω—é—î–º–æ —Å—Ç–∞–Ω, –ø—Ä–æ—Å—Ç–æ —á–∏—Ç–∞—î–º–æ
//         });
        
//         setGeocodingStatus({
//           isLoading: false,
//           lastAttempt: new Date().toLocaleTimeString(),
//           success: true
//         });
//       }
//     } catch (error) {
//       console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è:", error);
//       console.error("–î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏:", {
//         message: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞',
//         lat,
//         lng,
//         forceUpdate
//       });
      
//       // –ù–µ –±–ª–æ–∫—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫–∏ –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è
//       // –ü—Ä–æ—Å—Ç–æ –∑–∞–ø–∏—Å—É—î–º–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –∞–¥—Ä–µ—Å–∏
//       console.log("üîß –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç—ñ–ª—å–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –±–µ–∑ –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è");
      
//       setFormData(prev => ({
//         ...prev,
//         latitude: lat,
//         longitude: lng,
//         // –ó–∞–ª–∏—à–∞—î–º–æ –ø–æ–ª—è –∞–¥—Ä–µ—Å–∏ —è–∫ —î
//       }));
      
//       setGeocodingStatus({
//         isLoading: false,
//         lastAttempt: new Date().toLocaleTimeString(),
//         success: false
//       });
//     }
//   }, [geocodeCoordinates, countries, formData.countryId, formData.locationName]);

//   // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
//   useEffect(() => {
//     if (countries.length > 0 && !geolocation.state.userLatitude && !geolocation.state.loading) {
//       console.log("üåç –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –∑–∞–ø–∏—Ç –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó");
//       geolocation.requestLocation();
//     }
//   }, [countries.length, geolocation]);

//   // –û–±—Ä–æ–±–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó
//   useEffect(() => {
//     if (geolocation.state.userLatitude && geolocation.state.userLongitude) {
//       console.log("üåç –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–∞:", geolocation.state.userLatitude, geolocation.state.userLongitude);
      
//       setFormData(prev => ({
//         ...prev,
//         userLatitude: geolocation.state.userLatitude,
//         userLongitude: geolocation.state.userLongitude,
//         // –Ø–∫—â–æ useMyLocation === true, —Ç–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ —Ç–æ–≤–∞—Ä—É
//         ...(prev.useMyLocation && !prev.latitude && !prev.longitude && {
//           latitude: geolocation.state.userLatitude || undefined,
//           longitude: geolocation.state.userLongitude || undefined,
//         }),
//       }));

//       // –í–∏–∫–æ–Ω—É—î–º–æ –∑–≤–æ—Ä–æ—Ç–Ω–µ –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è –¢–Ü–õ–¨–ö–ò —è–∫—â–æ —Ü–µ –ø–µ—Ä—à–∏–π –∑–∞–ø—É—Å–∫
//       // –í–ê–ñ–õ–ò–í–û: –ù–∞ –ø–æ—á–∞—Ç–∫—É –∑–∞–≤–∂–¥–∏ –¥–æ–∑–≤–æ–ª—è—î–º–æ –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è –¥–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏
//       console.log("üîÑ –ó–∞–ø—É—Å–∫–∞—î–º–æ –∑–≤–æ—Ä–æ—Ç–Ω–µ –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è (–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ)");
      
//       // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –ø–µ—Ä—à–∏–π –∑–∞–ø—É—Å–∫ (—Ñ–æ—Ä–º–∞ —â–µ –ø–æ—Ä–æ–∂–Ω—è)
//       const isInitialLoad = !formData.countryId && !formData.locationName.trim();
      
//       if (isInitialLoad) {
//         console.log("‚úÖ –ü–æ—á–∞—Ç–∫–æ–≤–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è - –¥–æ–∑–≤–æ–ª—è—î–º–æ —Ñ–æ—Ä—Å–æ–≤–∞–Ω–µ –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è");
//         handleReverseGeocode(geolocation.state.userLatitude, geolocation.state.userLongitude, true);
//       } else {
//         console.log("‚ö†Ô∏è –§–æ—Ä–º–∞ –≤–∂–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–∞ - –º'—è–∫–µ –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è");
//         handleReverseGeocode(geolocation.state.userLatitude, geolocation.state.userLongitude, false);
//       }
//     }
//   }, [geolocation.state.userLatitude, geolocation.state.userLongitude, handleReverseGeocode, formData.countryId, formData.locationName]);



//   const handleInputChange = (
//     e: React.ChangeEvent<
//       HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement
//     >
//   ) => {
//     const { name, value, type } = e.target;
//     const checked =
//       type === "checkbox" ? (e.target as HTMLInputElement).checked : undefined;

//     if (name === "categoryId") {
//       const selectedCategory = categories.find(
//         (cat) => cat.id === Number(value)
//       );
//       setFormData({
//         ...formData,
//         [name]: value,
//         categoryName: selectedCategory ? selectedCategory.name : "",
//       });
//     } else if (name === "vatIncluded") {
//       setFormData({
//         ...formData,
//         vatIncluded: type === "checkbox" ? !!checked : value === "true",
//       });
//     } else {
//       setFormData({
//         ...formData,
//         [name]: value,
//       });
//     }

//     if (errors[name as keyof FormErrors]) {
//       setErrors({
//         ...errors,
//         [name]: undefined,
//       });
//     }
//   };

//   const handleMotorizedSpecChange = (
//     e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>
//   ) => {
//     const { name, value, type } = e.target;
//     const checked = (e.target as HTMLInputElement).checked;
//     setMotorizedSpec((prev) => ({
//       ...prev,
//       [name]: type === "checkbox" ? checked : value,
//     }));
//   };

//   const handleLocationChange = (name: string, value: string | number) => {
//     console.log("üñäÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–º—ñ–Ω—é—î –ø–æ–ª–µ:", name, "–∑–Ω–∞—á–µ–Ω–Ω—è:", value);
    
//     // –°–∫–∏–¥–∞—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ –ø–æ–ª—è, –∫–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å –¥–∞–Ω—ñ –≤—Ä—É—á–Ω—É
//     if (name === "countryId" || name === "locationName") {
//       console.log("–°–∫–∏–¥–∞—î–º–æ –∞–≤—Ç–æ–∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –¥–ª—è:", name);
//       setAutoFilledFields(prev => ({
//         ...prev,
//         [name]: false
//       }));
//     }

//     if (name === "countryId") {
//       setFormData({
//         ...formData,
//         countryId: String(value),
//         regionId: "",
//         communityId: "",
//         locationId: "",
//       });
//     } else if (name === "regionId") {
//       setFormData({
//         ...formData,
//         regionId: String(value),
//         communityId: "",
//         locationId: "",
//       });
//     } else if (name === "communityId") {
//       setFormData({
//         ...formData,
//         communityId: String(value),
//         locationId: "",
//       });
//     } else if (name === "latitude" || name === "longitude") {
//       // –í–ê–ñ–õ–ò–í–û: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∑ –∫–∞—Ä—Ç–∏ –º–æ–∂—É—Ç—å –æ–Ω–æ–≤–ª—é–≤–∞—Ç–∏—Å—è –ë–ï–ó –∑–º—ñ–Ω–∏ —Ä–µ–∂–∏–º—É useMyLocation
//       // –¢—ñ–ª—å–∫–∏ —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–∫—Ç–∏–≤–Ω–æ –ø—Ä–∞—Ü—é—î –∑ –∫–∞—Ä—Ç–æ—é, —Ç–æ–¥—ñ –∑–º—ñ–Ω—é—î–º–æ —Ä–µ–∂–∏–º
//       const newFormData = {
//         ...formData,
//         [name]: typeof value === "number" ? value : parseFloat(value),
//       };
      
//       // –ù–ï –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–º—ñ–Ω—é—î–º–æ useMyLocation –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
//       // –¶–µ –¥–æ–∑–≤–æ–ª–∏—Ç—å –∑–±–µ—Ä–µ–≥—Ç–∏ –≤–∏–±—ñ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
//       setFormData(newFormData);
//     } else {
//       setFormData({
//         ...formData,
//         [name]: String(value),
//       });
//     }

//     if (errors[name as keyof FormErrors]) {
//       setErrors({
//         ...errors,
//         [name]: undefined,
//       });
//     }
//   };

//   // –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–ª—ñ–∫—ñ–≤ –Ω–∞ –∫–∞—Ä—Ç—ñ
//   const handleMapCoordinatesChange = (name: string, value: string | number) => {
//     console.log("üó∫Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∫–ª—ñ–∫–Ω—É–≤ –Ω–∞ –∫–∞—Ä—Ç—ñ:", name, "–∑–Ω–∞—á–µ–Ω–Ω—è:", value);
    
//     if (name === "latitude" || name === "longitude") {
//       setFormData(prev => ({
//         ...prev,
//         [name]: typeof value === "number" ? value : parseFloat(value),
//         // –ù–ï –∑–º—ñ–Ω—é—î–º–æ useMyLocation –ø—Ä–∏ –∫–ª—ñ–∫—É –Ω–∞ –∫–∞—Ä—Ç—ñ
//       }));
      
//       console.log("üîÑ –ö–ª—ñ–∫ –Ω–∞ –∫–∞—Ä—Ç—ñ - –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –±–µ–∑ –∑–º—ñ–Ω–∏ useMyLocation");
//     }
//   };

//   const handleBrandSelect = (brandId: string, brandName: string) => {
//     setFormData({
//       ...formData,
//       brandId,
//       brandName,
//     });

//     if (errors.brandId) {
//       setErrors({
//         ...errors,
//         brandId: undefined,
//       });
//     }
//   };

//   const handleRemoveImage = (index: number) => {
//     const newImages = [...formData.images];
//     newImages.splice(index, 1);

//     setFormData({
//       ...formData,
//       images: newImages,
//     });
//   };

//   const handleImagesChange = (newImages: (File | string)[]) => {
//     // Filter out string images as they're handled separately
//     const fileImages = newImages.filter((img): img is File => img instanceof File);

//     setFormData({
//       ...formData,
//       images: fileImages,
//     });

//     if (errors.images) {
//       setErrors({
//         ...errors,
//         images: undefined,
//       });
//     }
//   };

//   const validateForm = (): boolean => {
//     const newErrors: FormErrors = {};

//     if (!formData.title.trim()) newErrors.title = "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è";
//     if (!formData.brandId) newErrors.brandId = "–í–∏–±–µ—Ä—ñ—Ç—å –º–∞—Ä–∫—É —Ç–µ—Ö–Ω—ñ–∫–∏";
//     if (!formData.description.trim())
//       newErrors.description = "–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è (–Ω–µ –º–µ–Ω—à–µ 20 —Å–∏–º–≤–æ–ª—ñ–≤)";
//     if (!formData.price.trim()) newErrors.price = "–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É";
//     else if (
//       isNaN(parseFloat(formData.price)) ||
//       parseFloat(formData.price) <= 0
//     )
//       newErrors.price = "–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Ü—ñ–Ω—É";
//     if (!formData.categoryId) newErrors.categoryId = "–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é";
//     if (!formData.countryId) newErrors.countryId = "–í–∏–±–µ—Ä—ñ—Ç—å –∫—Ä–∞—ó–Ω—É";
//     // –¢–ò–ú–ß–ê–°–û–í–û –í–ò–ú–ö–ù–ï–ù–û: –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ–≥—ñ–æ–Ω—É (API –Ω–µ –ø—Ä–∞—Ü—é—î)
//     // if (!formData.regionId) newErrors.regionId = "–í–∏–±–µ—Ä—ñ—Ç—å –æ–±–ª–∞—Å—Ç—å";
//     // –ì—Ä–æ–º–∞–¥–∞ –Ω–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–∞!
//     if (!formData.locationName?.trim())
//       newErrors.locationName = "–í–≤–µ–¥—ñ—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç";
//     if (formData.latitude === undefined || formData.longitude === undefined)
//       newErrors.latitude = "–í–∫–∞–∂—ñ—Ç—å –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –Ω–∞ –∫–∞—Ä—Ç—ñ";
//     if (formData.images.length === 0)
//       newErrors.images = "–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ö–æ—á–∞ –± –æ–¥–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è";

//     setErrors(newErrors);
//     return Object.keys(newErrors).length === 0;
//   };

//   const handleSubmit = async (e: React.FormEvent) => {
//     e.preventDefault();

//     if (!validateForm()) return;

//     setIsUploading(true);

//     try {
//       const formDataToSubmit = new FormData();

//       // –ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
//       formDataToSubmit.append("title", formData.title);
//       formDataToSubmit.append("description", formData.description);
//       formDataToSubmit.append("price", formData.price);
//       formDataToSubmit.append("currency", formData.currency);
//       formDataToSubmit.append("category", formData.categoryName);
//       formDataToSubmit.append("categoryId", formData.categoryId);

//       // –õ–æ–≥—É–≤–∞–Ω–Ω—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
//       console.log("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:", {
//         latitude: formData.latitude,
//         longitude: formData.longitude,
//         useMyLocation: formData.useMyLocation,
//         userLatitude: geolocation.state.userLatitude,
//         userLongitude: geolocation.state.userLongitude,
//         note: "–ù–∞ —Å–µ—Ä–≤–µ—Ä –≤—ñ–¥–ø—Ä–∞–≤–ª—è—é—Ç—å—Å—è —Å–∞–º–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ —Ç–æ–≤–∞—Ä—É (latitude/longitude), –Ω–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"
//       });

//       if (formData.latitude !== undefined && formData.longitude !== undefined) {
//         formDataToSubmit.append("latitude", String(formData.latitude));
//         formDataToSubmit.append("longitude", String(formData.longitude));
//       }

//       formDataToSubmit.append("condition", formData.condition);
//       formDataToSubmit.append("brandId", formData.brandId);

//       const locationData = {
//         countryId: Number(formData.countryId),
//         // –¢–ò–ú–ß–ê–°–û–í–û: regionId –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π (API –Ω–µ –ø—Ä–∞—Ü—é—î)
//         ...(formData.regionId ? { regionId: Number(formData.regionId) } : {}),
//         ...(formData.communityId
//           ? { communityId: Number(formData.communityId) }
//           : {}),
//         settlement: formData.locationName,
//       };
      
//       // –õ–æ–≥—É–≤–∞–Ω–Ω—è locationData
//       console.log("LocationData –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏:", locationData);
      
//       formDataToSubmit.append("location", JSON.stringify(locationData));

//       formDataToSubmit.append("priceType", formData.priceType);
//       formDataToSubmit.append("vatIncluded", String(formData.vatIncluded));

//       // –õ–æ–≥—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –¥–∞–Ω–∏—Ö —â–æ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—é—Ç—å—Å—è
//       console.log("–í—Å—ñ –¥–∞–Ω—ñ —Ñ–æ—Ä–º–∏:", Object.fromEntries(formDataToSubmit.entries()));

//       if (isMotorized) {
//         const hasFilledValues = Object.values(motorizedSpec).some((value) => {
//           if (value === null || value === undefined) return false;
//           if (typeof value === "string" && value.trim() === "") return false;
//           if (typeof value === "boolean" && value === false) return false;
//           return true;
//         });

//         if (hasFilledValues) {
//           const numericFields = [
//             "enginePower",
//             "enginePowerKw",
//             "fuelCapacity",
//             "numberOfGears",
//             "length",
//             "width",
//             "height",
//             "weight",
//             "wheelbase",
//             "groundClearance",
//             "workingWidth",
//             "capacity",
//             "liftCapacity",
//             "ptoSpeed",
//             "hydraulicFlow",
//             "hydraulicPressure",
//             "grainTankCapacity",
//             "headerWidth",
//             "threshingWidth",
//             "cleaningArea",
//             "engineHours",
//             "mileage",
//             "year",
//           ];

//           const cleanMotorizedSpec = { ...motorizedSpec };

//           Object.keys(cleanMotorizedSpec).forEach((key) => {
//             const typedKey = key as keyof typeof cleanMotorizedSpec;
//             const value = cleanMotorizedSpec[typedKey];

//             if (value === "") {
//               cleanMotorizedSpec[typedKey] = null;
//             } else if (
//               numericFields.includes(key) &&
//               typeof value === "string" &&
//               value.trim() !== ""
//             ) {
//               cleanMotorizedSpec[typedKey] = Number(value) as never;
//             }
//           });

//           formDataToSubmit.append(
//             "motorizedSpec",
//             JSON.stringify(cleanMotorizedSpec)
//           );
//         }
//       }

//       for (let i = 0; i < formData.images.length; i++) {
//         const file = formData.images[i];
//         if (file) {
//           formDataToSubmit.append("images", file);
//         }
//       }

//       const resultAction = await dispatch(createListing(formDataToSubmit));

//       if (createListing.fulfilled.match(resultAction)) {
//         navigate(`/listings/${resultAction.payload.id}`);
//       } else {
//         const errorMessage = handleApiError(resultAction.error);
//         alert(`–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è: ${errorMessage}`);
//       }
//     } catch (error) {
//       const errorMessage = handleApiError(error);
//       alert(`–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è: ${errorMessage}`);
//     } finally {
//       setIsUploading(false);
//     }
//   };

//   const handleUseMyLocationToggle = (checked: boolean) => {
//     setFormData((prev) => {
//       if (checked && geolocation.state.userLatitude && geolocation.state.userLongitude) {
//         // –Ø–∫—â–æ –≤–∫–ª—é—á–∞—î–º–æ "–º–æ—î –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è" —ñ —î –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
//         // –ö–û–ü–Ü–Æ–Ñ–ú–û –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ç–æ–≤–∞—Ä—É
//         return {
//           ...prev,
//           useMyLocation: true,
//           latitude: geolocation.state.userLatitude,
//           longitude: geolocation.state.userLongitude,
//         };
//       } else {
//         // –Ø–∫—â–æ –≤—ñ–¥–∫–ª—é—á–∞—î–º–æ, –ø—Ä–æ—Å—Ç–æ –∑–º—ñ–Ω—é—î–º–æ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å
//         // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ —Ç–æ–≤–∞—Ä—É –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è —è–∫ —î (–Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—É—é—Ç—å—Å—è)
//         return {
//           ...prev,
//           useMyLocation: false,
//           // –ù–ï –∑–º—ñ–Ω—é—î–º–æ latitude —ñ longitude - –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–æ–∂–µ –≤–∏–±—Ä–∞—Ç–∏ —ó—Ö –Ω–∞ –∫–∞—Ä—Ç—ñ
//         };
//       }
//     });
//   };

//   const requestGeolocation = () => {
//     geolocation.requestLocation();
//   };

//   // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ —Å—Ç–∞–Ω –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó –∑ formData
//   useEffect(() => {
//     if (geolocation.state.userLatitude !== undefined && geolocation.state.userLongitude !== undefined) {
//       setFormData(prev => ({
//         ...prev,
//         userLatitude: geolocation.state.userLatitude,
//         userLongitude: geolocation.state.userLongitude,
//       }));
//     }
//   }, [geolocation.state.userLatitude, geolocation.state.userLongitude]);

//   // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∞–¥—Ä–µ—Å–∏ –∑ –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è
//   const processGeocodeAddress = (
//     address: Record<string, string>, 
//     countries: { id: number; name: string; code: string; latitude?: number; longitude?: number }[]
//   ) => {
//     console.log("–û–±—Ä–æ–±–∫–∞ –∞–¥—Ä–µ—Å–∏:", address);
//     console.log("–î–æ—Å—Ç—É–ø–Ω—ñ –∫—Ä–∞—ó–Ω–∏:", countries.map(c => `${c.name} (${c.code})`));
    
//     // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫—Ä–∞—ó–Ω—É
//     const country = countries.find(
//       (c) => {
//         const countryCodeMatch = c.code?.toLowerCase() === (address.country_code || "").toLowerCase();
//         const countryNameMatch = c.name?.toLowerCase() === (address.country || "").toLowerCase();
        
//         console.log(`–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—Ä–∞—ó–Ω—É ${c.name} (${c.code}):`, {
//           codeMatch: countryCodeMatch,
//           nameMatch: countryNameMatch,
//           searchingCode: address.country_code,
//           searchingName: address.country
//         });
        
//         return countryCodeMatch || countryNameMatch;
//       }
//     );
    
//     if (!country) {
//       console.warn("–ö—Ä–∞—ó–Ω—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è:", address.country_code, address.country);
//       console.warn("–î–æ—Å—Ç—É–ø–Ω—ñ –∫—Ä–∞—ó–Ω–∏:", countries.map(c => `${c.name} (${c.code}) - ID: ${c.id}`));
//       return null;
//     }
    
//     console.log("‚úÖ –ó–Ω–∞–π–¥–µ–Ω–∞ –∫—Ä–∞—ó–Ω–∞:", country);
    
//     // –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É
//     let locationName = "";
    
//     // –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: –º—ñ—Å—Ç–æ -> –º—ñ—Å—Ç–µ—á–∫–æ -> —Å–µ–ª–æ -> –ø–µ—Ä–µ–¥–º—ñ—Å—Ç—è -> —Ä–∞–π–æ–Ω
//     const locationFields = [
//       'city', 'town', 'village', 'hamlet', 
//       'suburb', 'neighbourhood', 'quarter', 
//       'city_district', 'municipality'
//     ];
    
//     for (const field of locationFields) {
//       if (address[field]) {
//         locationName = address[field];
//         break;
//       }
//     }
    
//     // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–µ–≥—ñ–æ–Ω/–æ–±–ª–∞—Å—Ç—å –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –∫—Ä–∞—ó–Ω–∏
//     let regionName = "";
    
//     const countryCode = country.code?.toUpperCase();
    
//     switch (countryCode) {
//       case "UA": // –£–∫—Ä–∞—ó–Ω–∞
//         regionName = address.state || address.region || address.province || "";
//         break;
//       case "PL": // –ü–æ–ª—å—â–∞  
//         regionName = address.state || address.province || ""; // –≤–æ—î–≤–æ–¥—Å—Ç–≤–æ
//         break;
//       case "DE": // –ù—ñ–º–µ—á—á–∏–Ω–∞
//         regionName = address.state || ""; // –∑–µ–º–ª—è (bundesland)
//         break;
//       case "US": // –°–®–ê
//         regionName = address.state || ""; // —à—Ç–∞—Ç
//         break;
//       case "RO": // –†—É–º—É–Ω—ñ—è
//         regionName = address.county || address.state || ""; // –ø–æ–≤—ñ—Ç
//         break;
//       case "FR": // –§—Ä–∞–Ω—Ü—ñ—è
//         regionName = address.state || address.region || ""; // —Ä–µ–≥—ñ–æ–Ω
//         break;
//       case "IT": // –Ü—Ç–∞–ª—ñ—è
//         regionName = address.state || address.region || ""; // —Ä–µ–≥—ñ–æ–Ω
//         break;
//       case "ES": // –Ü—Å–ø–∞–Ω—ñ—è
//         regionName = address.state || address.region || ""; // –∞–≤—Ç–æ–Ω–æ–º–Ω–∞ –æ–±–ª–∞—Å—Ç—å
//         break;
//       case "GB": // –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω—ñ—è
//         regionName = address.county || address.state || "";
//         break;
//       case "CZ": // –ß–µ—Ö—ñ—è
//         regionName = address.state || address.region || ""; // –∫—Ä–∞–π
//         break;
//       case "SK": // –°–ª–æ–≤–∞—á—á–∏–Ω–∞
//         regionName = address.state || address.region || ""; // –∫—Ä–∞–π
//         break;
//       case "HU": // –£–≥–æ—Ä—â–∏–Ω–∞
//         regionName = address.county || address.state || ""; // –º–µ–¥—å—î
//         break;
//       default: // –ó–∞–≥–∞–ª—å–Ω–∏–π –≤–∏–ø–∞–¥–æ–∫
//         regionName = address.state || address.region || address.province || address.county || "";
//         break;
//     }
    
//     console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–æ–±–∫–∏:", {
//       country: country,
//       locationName,
//       regionName,
//       rawAddress: address
//     });
    
//     if (!locationName) {
//       console.warn("–ù–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –∞–¥—Ä–µ—Å—ñ:", address);
//     }
    
//     if (!regionName) {
//       console.warn("–†–µ–≥—ñ–æ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –∞–¥—Ä–µ—Å—ñ:", address);
//     }
    
//     return {
//       country,
//       locationName,
//       regionName
//     };
//   };

//   return (
//     <div className="container mx-auto px-4 py-8">
//       <h1 className="text-2xl font-bold text-gray-900 mb-6">
//         –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
//       </h1>

//       <form onSubmit={handleSubmit} autoComplete="off">
//         <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
//           {/* –õ—ñ–≤–∞ –∫–æ–ª–æ–Ω–∫–∞ */}
//           <div className="space-y-6">
//             {/* –ù–∞–∑–≤–∞ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è */}
//             <div>
//               <label
//                 htmlFor="title"
//                 className="block text-sm font-medium text-gray-700 mb-1"
//               >
//                 –ù–∞–∑–≤–∞ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è *
//               </label>
//               <input
//                 type="text"
//                 id="title"
//                 name="title"
//                 value={formData.title}
//                 onChange={handleInputChange}
//                 placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –¢—Ä–∞–∫—Ç–æ—Ä John Deere 6155M, 2020"
//                 className={`w-full px-4 py-2 border ${
//                   errors.title ? "border-red-500" : "border-gray-300"
//                 } rounded-md focus:outline-none focus:ring-1 focus:ring-green-500 focus:border-green-500`}
//                 autoComplete="off"
//               />
//               {errors.title && (
//                 <p className="mt-1 text-sm text-red-500">{errors.title}</p>
//               )}
//             </div>

//             {/* –ú–∞—Ä–∫–∞ —Ç–µ—Ö–Ω—ñ–∫–∏ */}
//             <BrandSelector
//               value={formData.brandId}
//               onChange={handleBrandSelect}
//               error={errors.brandId || ""}
//             />

//             {/* –û–ø–∏—Å */}
//             <div>
//               <label
//                 htmlFor="description"
//                 className="block text-sm font-medium text-gray-700 mb-1"
//               >
//                 –û–ø–∏—Å *
//               </label>
//               <textarea
//                 id="description"
//                 name="description"
//                 value={formData.description}
//                 onChange={handleInputChange}
//                 placeholder="–î–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É, —Ç–µ—Ö–Ω—ñ—á–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, —Å—Ç–∞–Ω, –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü—ñ—è —Ç–æ—â–æ"
//                 rows={8}
//                 className={`w-full px-4 py-2 border ${
//                   errors.description ? "border-red-500" : "border-gray-300"
//                 } rounded-md focus:outline-none focus:ring-1 focus:ring-green-500 focus:border-green-500`}
//                 autoComplete="off"
//               />
//               {errors.description && (
//                 <p className="mt-1 text-sm text-red-500">
//                   {errors.description}
//                 </p>
//               )}
//             </div>

//             {/* –¶—ñ–Ω–∞ */}
//             <PriceInput
//               price={formData.price}
//               currency={formData.currency}
//               priceType={formData.priceType}
//               vatIncluded={formData.vatIncluded}
//               onChange={handleInputChange}
//               error={errors.price || ""}
//             />
//           </div>

//           {/* –ü—Ä–∞–≤–∞ –∫–æ–ª–æ–Ω–∫–∞ */}
//           <div className="space-y-6">
//             {/* –ö–∞—Ç–µ–≥–æ—Ä—ñ—è */}
//             <CategorySelector
//               value={formData.categoryId}
//               onChange={handleInputChange}
//               error={errors.categoryId || ""}
//             />

//             {/* –°—Ç–∞–Ω —Ç–µ—Ö–Ω—ñ–∫–∏ */}
//             <div>
//               <label
//                 htmlFor="condition"
//                 className="block text-sm font-medium text-gray-700 mb-1"
//               >
//                 –°—Ç–∞–Ω —Ç–µ—Ö–Ω—ñ–∫–∏ *
//               </label>
//               <div className="relative">
//                 <select
//                   id="condition"
//                   name="condition"
//                   value={formData.condition}
//                   onChange={handleInputChange}
//                   className="appearance-none w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-green-500 focus:border-green-500"
//                 >
//                   <option value="NEW">–ù–æ–≤–∞</option>
//                   <option value="USED">–í–∂–∏–≤–∞–Ω–∞</option>
//                 </select>
//               </div>
//             </div>

//             {/* –ú—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É */}
//             <div className="space-y-4">
//               <h3 className="text-lg font-medium text-gray-900">–ú—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É</h3>
              
//               {/* –¢–µ—Å—Ç–µ—Ä –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó */}
//               <GeolocationTester onLocationReceived={(lat, lng) => {
//                 console.log("üß™ –û—Ç—Ä–∏–º–∞–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –≤—ñ–¥ —Ç–µ—Å—Ç–µ—Ä–∞:", lat, lng);
//                 handleReverseGeocode(lat, lng, true);
//               }} />
              
//               {/* –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞–Ω—É –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è */}
//               {geocodingStatus.isLoading && (
//                 <div className="p-3 bg-yellow-50 border border-yellow-200 rounded-md">
//                   <div className="flex items-center">
//                     <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-yellow-600 mr-2"></div>
//                     <span className="text-sm text-yellow-800">–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–¥—Ä–µ—Å–∏ –∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç...</span>
//                   </div>
//                 </div>
//               )}
              
//               {geocodingStatus.lastAttempt && !geocodingStatus.isLoading && (
//                 <div className={`p-3 rounded-md ${
//                   geocodingStatus.success 
//                     ? 'bg-green-50 border border-green-200' 
//                     : 'bg-red-50 border border-red-200'
//                 }`}>
//                   <div className="flex items-center">
//                     {geocodingStatus.success ? (
//                       <svg className="w-4 h-4 text-green-600 mr-2" fill="currentColor" viewBox="0 0 20 20">
//                         <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
//                       </svg>
//                     ) : (
//                       <svg className="w-4 h-4 text-red-600 mr-2" fill="currentColor" viewBox="0 0 20 20">
//                         <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
//                       </svg>
//                     )}
//                     <span className={`text-sm ${
//                       geocodingStatus.success ? 'text-green-800' : 'text-red-800'
//                     }`}>
//                       {geocodingStatus.success 
//                         ? `–ê–¥—Ä–µ—Å–∞ —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–∞ (${geocodingStatus.lastAttempt})`
//                         : `–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–¥—Ä–µ—Å—É (${geocodingStatus.lastAttempt}). –í–∏ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω—ñ –≤—Ä—É—á–Ω—É.`
//                       }
//                     </span>
//                   </div>
//                 </div>
//               )}
              
//               {/* –î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∞ –ø–∞–Ω–µ–ª—å (—Ç—ñ–ª—å–∫–∏ –≤ development) */}
//               <GeolocationDebugPanel
//                 formData={{
//                   useMyLocation: formData.useMyLocation,
//                   userLatitude: geolocation.state.userLatitude,
//                   userLongitude: geolocation.state.userLongitude,
//                   latitude: formData.latitude,
//                   longitude: formData.longitude,
//                   countryId: formData.countryId,
//                   regionId: formData.regionId,
//                   locationName: formData.locationName,
//                 }}
//                 countries={countries}
//                 onLocationChange={handleLocationChange}
//                 processGeocodeAddress={processGeocodeAddress}
//                 onForceGeocodeUpdate={(lat, lng) => handleReverseGeocode(lat, lng, true)}
//               />
              
//               {/* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ */}
//               <CoordinatesDisplay
//                 useMyLocation={formData.useMyLocation}
//                 userLatitude={geolocation.state.userLatitude}
//                 userLongitude={geolocation.state.userLongitude}
//                 productLatitude={formData.latitude}
//                 productLongitude={formData.longitude}
//                 isLoadingLocation={geolocation.state.loading}
//                 onUseMyLocationToggle={handleUseMyLocationToggle}
//                 onRequestGeolocation={requestGeolocation}
//               />
//             </div>

//             {/* –õ–æ–∫–∞—Ü—ñ—è */}
//             <LocationSelector
//               countries={countries}
//               data={{
//                 countryId: formData.countryId,
//                 regionId: formData.regionId,
//                 communityId: formData.communityId,
//                 locationName: formData.locationName,
//                 latitude: formData.latitude || 0,
//                 longitude: formData.longitude || 0,
//               }}
//               errors={{
//                 countryId: errors.countryId || "",
//                 regionId: errors.regionId || "",
//                 communityId: errors.communityId || "",
//                 locationName: errors.locationName || "",
//                 latitude: errors.latitude || "",
//               }}
//               onChange={handleLocationChange}
//               onMapClick={handleMapCoordinatesChange}
//               mapLoaded={mapLoaded}
//               useCountryCoordinates={true}
//             />

//             {/* –Ü–Ω–¥–∏–∫–∞—Ü—ñ—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–ø–æ–≤–Ω–µ–Ω–∏—Ö –ø–æ–ª—ñ–≤ */}
//             {(autoFilledFields.countryId || autoFilledFields.locationName) && (
//               <div className="text-sm text-blue-600 bg-blue-50 p-3 rounded-md">
//                 <div className="flex items-center">
//                   <svg className="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20">
//                     <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
//                   </svg>
//                   <span className="font-medium">–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–ø–æ–≤–Ω–µ–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó:</span>
//                 </div>
//                 <ul className="mt-1 ml-6 text-xs">
//                   {autoFilledFields.countryId && <li>‚Ä¢ –ö—Ä–∞—ó–Ω–∞</li>}
//                   {autoFilledFields.locationName && <li>‚Ä¢ –ù–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç</li>}
//                 </ul>
//                 <p className="mt-2 text-xs text-gray-600">
//                   –í–∏ –º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —Ü—ñ –¥–∞–Ω—ñ –≤—Ä—É—á–Ω—É, —è–∫—â–æ –≤–æ–Ω–∏ –Ω–µ—Ç–æ—á–Ω—ñ.
//                 </p>
//               </div>
//             )}

//             {/* –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å */}
//             <ImageUploader
//               images={formData.images}
//               onChange={handleImagesChange}
//               onRemove={handleRemoveImage}
//               error={errors.images || ""}
//             />
//           </div>
//         </div>

//         {/* –¢–µ—Ö–Ω—ñ—á–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ */}
//         <MotorizedSpecFormComponent
//           isMotorized={isMotorized}
//           motorizedSpec={motorizedSpec}
//           onChange={handleMotorizedSpecChange}
//         />

//         <div className="mt-8 flex items-center justify-end space-x-4">
//           <button
//             type="button"
//             onClick={() => navigate(-1)}
//             className="px-6 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 transition-colors"
//           >
//             –°–∫–∞—Å—É–≤–∞—Ç–∏
//           </button>
//           <button
//             type="submit"
//             disabled={isLoading || isUploading}
//             className="px-6 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors disabled:opacity-70 disabled:cursor-not-allowed"
//           >
//             {isLoading || isUploading
//               ? "–ü—É–±–ª—ñ–∫–∞—Ü—ñ—è..."
//               : "–û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è"}
//           </button>
//         </div>
//       </form>
//     </div>
//   );

//   };

// export default CreateListingPage;